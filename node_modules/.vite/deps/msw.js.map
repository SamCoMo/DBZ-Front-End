{
  "version": 3,
  "sources": ["../../@mswjs/interceptors/src/interceptors/fetch/index.ts", "../../msw/src/index.ts", "../../msw/src/context/index.ts", "../../msw/src/context/status.ts", "../../msw/src/context/set.ts", "../../msw/src/context/cookie.ts", "../../msw/src/context/body.ts", "../../msw/src/utils/internal/jsonParse.ts", "../../msw/src/utils/internal/isObject.ts", "../../msw/src/utils/internal/mergeRight.ts", "../../msw/src/context/json.ts", "../../msw/src/context/data.ts", "../../msw/src/context/extensions.ts", "../../msw/src/context/delay.ts", "../../msw/src/context/errors.ts", "../../msw/src/context/fetch.ts", "../../msw/src/context/text.ts", "../../msw/src/context/xml.ts", "../../msw/src/utils/internal/checkGlobals.ts", "../../msw/src/utils/internal/devUtils.ts", "../../msw/src/setupWorker/setupWorker.ts", "../../msw/src/setupWorker/start/createStartHandler.ts", "../../msw/src/setupWorker/start/utils/getWorkerInstance.ts", "../../msw/src/setupWorker/start/utils/getWorkerByRegistration.ts", "../../msw/src/utils/url/getAbsoluteWorkerUrl.ts", "../../msw/src/setupWorker/start/utils/printStartMessage.ts", "../../msw/src/setupWorker/start/utils/enableMocking.ts", "../../msw/src/setupWorker/start/utils/createMessageChannel.ts", "../../msw/src/utils/NetworkError.ts", "../../msw/src/utils/request/parseWorkerRequest.ts", "../../msw/src/utils/request/MockedRequest.ts", "../../msw/src/utils/request/getRequestCookies.ts", "../../msw/src/utils/internal/parseMultipartData.ts", "../../msw/src/utils/request/parseBody.ts", "../../msw/src/utils/internal/isStringEqual.ts", "../../msw/src/utils/handleRequest.ts", "../../msw/src/utils/getResponse.ts", "../../msw/src/utils/request/onUnhandledRequest.ts", "../../msw/src/utils/internal/parseGraphQLRequest.ts", "../../msw/src/utils/request/getPublicUrlFromRequest.ts", "../../msw/src/utils/logging/getStatusCodeColor.ts", "../../msw/src/utils/logging/getTimestamp.ts", "../../msw/src/utils/logging/prepareRequest.ts", "../../msw/src/utils/logging/prepareResponse.ts", "../../msw/src/utils/matching/matchRequestUrl.ts", "../../msw/src/utils/url/cleanUrl.ts", "../../msw/src/utils/url/isAbsoluteUrl.ts", "../../msw/src/utils/url/getAbsoluteUrl.ts", "../../msw/src/utils/matching/normalizePath.ts", "../../msw/src/handlers/RequestHandler.ts", "../../msw/src/response.ts", "../../msw/src/utils/internal/compose.ts", "../../msw/src/utils/internal/getCallFrame.ts", "../../msw/src/utils/internal/isIterable.ts", "../../msw/src/handlers/RestHandler.ts", "../../msw/src/context/field.ts", "../../msw/src/utils/internal/tryCatch.ts", "../../msw/src/handlers/GraphQLHandler.ts", "../../msw/src/utils/request/readResponseCookies.ts", "../../msw/src/utils/logging/serializeResponse.ts", "../../msw/src/setupWorker/start/createRequestListener.ts", "../../msw/src/utils/internal/requestIntegrityCheck.ts", "../../msw/src/utils/deferNetworkRequestsUntil.ts", "../../msw/src/setupWorker/start/createResponseListener.ts", "../../msw/src/setupWorker/start/utils/validateWorkerScope.ts", "../../msw/src/setupWorker/stop/utils/printStopMessage.ts", "../../msw/src/setupWorker/stop/createStop.ts", "../../msw/src/setupWorker/start/utils/prepareStartHandler.ts", "../../msw/src/setupWorker/start/createFallbackRequestListener.ts", "../../msw/src/utils/request/createResponseFromIsomorphicResponse.ts", "../../msw/src/setupWorker/start/createFallbackStart.ts", "../../msw/src/setupWorker/stop/createFallbackStop.ts", "../../msw/src/SetupApi.ts", "../../msw/src/utils/internal/pipeEvents.ts", "../../msw/src/utils/internal/toReadonlyArray.ts", "../../msw/src/rest.ts", "../../msw/src/graphql.ts"],
  "sourcesContent": ["import {\n  Headers,\n  flattenHeadersObject,\n  objectToHeaders,\n  headersToObject,\n} from 'headers-polyfill'\nimport { invariant } from 'outvariant'\nimport { until } from '@open-draft/until'\nimport { IsomorphicRequest } from '../../IsomorphicRequest'\nimport {\n  HttpRequestEventMap,\n  IsomorphicResponse,\n  IS_PATCHED_MODULE,\n} from '../../glossary'\nimport { Interceptor } from '../../Interceptor'\nimport { toIsoResponse } from '../../utils/toIsoResponse'\nimport { InteractiveIsomorphicRequest } from '../../InteractiveIsomorphicRequest'\n\nexport class FetchInterceptor extends Interceptor<HttpRequestEventMap> {\n  static symbol = Symbol('fetch')\n\n  constructor() {\n    super(FetchInterceptor.symbol)\n  }\n\n  protected checkEnvironment() {\n    return (\n      typeof globalThis !== 'undefined' &&\n      typeof globalThis.fetch !== 'undefined'\n    )\n  }\n\n  protected setup() {\n    const pureFetch = globalThis.fetch\n\n    invariant(\n      !(pureFetch as any)[IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    )\n\n    globalThis.fetch = async (input, init) => {\n      const request = new Request(input, init)\n\n      const url = typeof input === 'string' ? input : input.url\n      const method = request.method\n\n      this.log('[%s] %s', method, url)\n\n      const body = await request.clone().arrayBuffer()\n\n      const requestUrl = new URL(\n        url,\n        typeof location !== 'undefined' ? location.origin : undefined\n      )\n\n      const isomorphicRequest = new IsomorphicRequest(requestUrl, {\n        body,\n        method,\n        headers: new Headers(request.headers),\n        credentials: request.credentials,\n      })\n\n      const interactiveIsomorphicRequest = new InteractiveIsomorphicRequest(\n        isomorphicRequest\n      )\n\n      this.log('isomorphic request', interactiveIsomorphicRequest)\n\n      this.log(\n        'emitting the \"request\" event for %d listener(s)...',\n        this.emitter.listenerCount('request')\n      )\n      this.emitter.emit('request', interactiveIsomorphicRequest)\n\n      this.log('awaiting for the mocked response...')\n\n      const [middlewareException, mockedResponse] = await until(async () => {\n        await this.emitter.untilIdle('request', ({ args: [request] }) => {\n          return request.id === interactiveIsomorphicRequest.id\n        })\n        this.log('all request listeners have been resolved!')\n\n        const [mockedResponse] =\n          await interactiveIsomorphicRequest.respondWith.invoked()\n        this.log('event.respondWith called with:', mockedResponse)\n\n        return mockedResponse\n      })\n\n      if (middlewareException) {\n        console.error(`${request.method} ${request.url} net::ERR_FAILED`)\n        const error = Object.assign(new TypeError('Failed to fetch'), {\n          cause: middlewareException,\n        })\n        return Promise.reject(error)\n      }\n\n      if (mockedResponse) {\n        this.log('received mocked response:', mockedResponse)\n\n        const isomorphicResponse = toIsoResponse(mockedResponse)\n        this.log('derived isomorphic response:', isomorphicResponse)\n\n        this.emitter.emit(\n          'response',\n          interactiveIsomorphicRequest,\n          isomorphicResponse\n        )\n\n        const response = new Response(mockedResponse.body, {\n          ...isomorphicResponse,\n          // `Response.headers` cannot be instantiated with the `Headers` polyfill.\n          // Apparently, it halts if the `Headers` class contains unknown properties\n          // (i.e. the internal `Headers.map`).\n          headers: flattenHeadersObject(mockedResponse.headers || {}),\n        })\n\n        // Set the \"response.url\" property to equal the intercepted request URL.\n        Object.defineProperty(response, 'url', {\n          writable: false,\n          enumerable: true,\n          configurable: false,\n          value: interactiveIsomorphicRequest.url.href,\n        })\n\n        return response\n      }\n\n      this.log('no mocked response received!')\n\n      return pureFetch(request).then(async (response) => {\n        const cloneResponse = response.clone()\n        this.log('original fetch performed', cloneResponse)\n\n        this.emitter.emit(\n          'response',\n          interactiveIsomorphicRequest,\n          await normalizeFetchResponse(cloneResponse)\n        )\n        return response\n      })\n    }\n\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true,\n    })\n\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: undefined,\n      })\n\n      globalThis.fetch = pureFetch\n\n      this.log('restored native \"globalThis.fetch\"!', globalThis.fetch.name)\n    })\n  }\n}\n\nasync function normalizeFetchResponse(\n  response: Response\n): Promise<IsomorphicResponse> {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: objectToHeaders(headersToObject(response.headers)),\n    body: await response.text(),\n  }\n}\n", "import * as context from './context'\nimport { checkGlobals } from './utils/internal/checkGlobals'\nexport { context }\n\nexport { setupWorker } from './setupWorker/setupWorker'\n\nexport { SetupApi } from './SetupApi'\n\nexport {\n  response,\n  defaultResponse,\n  createResponseComposition,\n} from './response'\n\n/* Request handlers */\nexport { RequestHandler, defaultContext } from './handlers/RequestHandler'\nexport { rest } from './rest'\nexport { RestHandler, RESTMethods, restContext } from './handlers/RestHandler'\nexport { graphql } from './graphql'\nexport { GraphQLHandler, graphqlContext } from './handlers/GraphQLHandler'\n\n/* Utils */\nexport { matchRequestUrl } from './utils/matching/matchRequestUrl'\nexport { compose } from './utils/internal/compose'\nexport * from './utils/handleRequest'\nexport { cleanUrl } from './utils/url/cleanUrl'\n\n/**\n * Type definitions.\n */\nexport type { SetupWorker, StartOptions } from './setupWorker/glossary'\nexport { SetupWorkerApi } from './setupWorker/setupWorker'\nexport type { SharedOptions } from './sharedOptions'\n\nexport * from './utils/request/MockedRequest'\nexport type {\n  ResponseResolver,\n  ResponseResolverReturnType,\n  AsyncResponseResolverReturnType,\n  DefaultBodyType,\n  DefaultRequestMultipartBody,\n} from './handlers/RequestHandler'\n\nexport type {\n  MockedResponse,\n  ResponseTransformer,\n  ResponseComposition,\n  ResponseCompositionOptions,\n  ResponseFunction,\n} from './response'\n\nexport type {\n  RestRequest,\n  RestContext,\n  RequestQuery,\n  ParsedRestRequest,\n} from './handlers/RestHandler'\n\nexport type {\n  GraphQLContext,\n  GraphQLVariables,\n  GraphQLRequest,\n  GraphQLRequestBody,\n  GraphQLJsonRequestBody,\n} from './handlers/GraphQLHandler'\n\nexport type { Path, PathParams, Match } from './utils/matching/matchRequestUrl'\nexport type { DelayMode } from './context/delay'\nexport { ParsedGraphQLRequest } from './utils/internal/parseGraphQLRequest'\n\n// Validate environmental globals before executing any code.\n// This ensures that the library gives user-friendly errors\n// when ran in the environments that require additional polyfills\n// from the end user.\ncheckGlobals()\n", "export { status } from './status'\nexport { set } from './set'\nexport { cookie } from './cookie'\nexport { body } from './body'\nexport { data } from './data'\nexport { extensions } from './extensions'\nexport { delay } from './delay'\nexport { errors } from './errors'\nexport { fetch } from './fetch'\nexport { json } from './json'\nexport { text } from './text'\nexport { xml } from './xml'\n", "import statuses from 'statuses/codes.json'\nimport { ResponseTransformer } from '../response'\n\n/**\n * Sets a response status code and text.\n * @example\n * res(ctx.status(301))\n * res(ctx.status(400, 'Custom status text'))\n * @see {@link https://mswjs.io/docs/api/context/status `ctx.status()`}\n */\nexport const status = (\n  statusCode: number,\n  statusText?: string,\n): ResponseTransformer => {\n  return (res) => {\n    res.status = statusCode\n    res.statusText =\n      statusText || statuses[String(statusCode) as keyof typeof statuses]\n\n    return res\n  }\n}\n", "import { objectToHeaders } from 'headers-polyfill'\nimport { ResponseTransformer } from '../response'\n\nexport type HeadersObject<KeyType extends string = string> = Record<\n  KeyType,\n  string | string[]\n>\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\n */\nexport type ForbiddenHeaderNames =\n  | 'cookie'\n  | 'cookie2'\n  | 'set-cookie'\n  | 'set-cookie2'\n\nexport type ForbiddenHeaderError<HeaderName extends string> =\n  `SafeResponseHeader: the '${HeaderName}' header cannot be set on the response. Please use the 'ctx.cookie()' function instead.`\n\n/**\n * Sets one or multiple response headers.\n * @example\n * ctx.set('Content-Type', 'text/plain')\n * ctx.set({\n *   'Accept': 'application/javascript',\n *   'Content-Type': \"text/plain\"\n * })\n * @see {@link https://mswjs.io/docs/api/context/set `ctx.set()`}\n */\nexport function set<N extends string | HeadersObject>(\n  ...args: N extends string\n    ? Lowercase<N> extends ForbiddenHeaderNames\n      ? [ForbiddenHeaderError<N>]\n      : [N, string]\n    : N extends HeadersObject<infer CookieName>\n    ? Lowercase<CookieName> extends ForbiddenHeaderNames\n      ? [ForbiddenHeaderError<CookieName>]\n      : [N]\n    : [N]\n): ResponseTransformer {\n  return (res) => {\n    const [name, value] = args\n\n    if (typeof name === 'string') {\n      res.headers.append(name, value as string)\n    } else {\n      const headers = objectToHeaders(name)\n      headers.forEach((value, name) => {\n        res.headers.append(name, value)\n      })\n    }\n\n    return res\n  }\n}\n", "import * as cookieUtils from 'cookie'\nimport { ResponseTransformer } from '../response'\n\n/**\n * Sets a given cookie on the mocked response.\n * @example res(ctx.cookie('name', 'value'))\n */\nexport const cookie = (\n  name: string,\n  value: string,\n  options?: cookieUtils.CookieSerializeOptions,\n): ResponseTransformer => {\n  return (res) => {\n    const serializedCookie = cookieUtils.serialize(name, value, options)\n    res.headers.append('Set-Cookie', serializedCookie)\n\n    if (typeof document !== 'undefined') {\n      document.cookie = serializedCookie\n    }\n\n    return res\n  }\n}\n", "import { ResponseTransformer } from '../response'\n\n/**\n * Sets a raw response body. Does not append any `Content-Type` headers.\n * @example\n * res(ctx.body('Successful response'))\n * res(ctx.body(JSON.stringify({ key: 'value' })))\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\n */\nexport const body = <\n  BodyType extends string | Blob | BufferSource | ReadableStream | FormData,\n>(\n  value: BodyType,\n): ResponseTransformer<BodyType> => {\n  return (res) => {\n    res.body = value\n    return res\n  }\n}\n", "/**\n * Parses a given value into a JSON.\n * Does not throw an exception on an invalid JSON string.\n */\nexport function jsonParse<ValueType extends Record<string, any>>(\n  value: any,\n): ValueType | undefined {\n  try {\n    return JSON.parse(value)\n  } catch (error) {\n    return undefined\n  }\n}\n", "/**\n * Determines if the given value is an object.\n */\nexport function isObject(value: any): boolean {\n  return value != null && typeof value === 'object' && !Array.isArray(value)\n}\n", "import { isObject } from './isObject'\n\n/**\n * Deeply merges two given objects with the right one\n * having a priority during property assignment.\n */\nexport function mergeRight(\n  left: Record<string, any>,\n  right: Record<string, any>,\n) {\n  return Object.entries(right).reduce((result, [key, rightValue]) => {\n    const leftValue = result[key]\n\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue)\n      return result\n    }\n\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue)\n      return result\n    }\n\n    result[key] = rightValue\n    return result\n  }, Object.assign({}, left))\n}\n", "import { ResponseTransformer } from '../response'\n\n/**\n * Sets the given value as the JSON body of the response.\n * Appends a `Content-Type: application/json` header on the\n * mocked response.\n * @example\n * res(ctx.json('Some string'))\n * res(ctx.json({ key: 'value' }))\n * res(ctx.json([1, '2', false, { ok: true }]))\n * @see {@link https://mswjs.io/docs/api/context/json `ctx.json()`}\n */\nexport const json = <BodyTypeJSON>(\n  body: BodyTypeJSON,\n): ResponseTransformer<BodyTypeJSON> => {\n  return (res) => {\n    res.headers.set('Content-Type', 'application/json')\n    res.body = JSON.stringify(body) as any\n\n    return res\n  }\n}\n", "import { jsonParse } from '../utils/internal/jsonParse'\nimport { mergeRight } from '../utils/internal/mergeRight'\nimport { json } from './json'\nimport { GraphQLPayloadContext } from '../typeUtils'\n\n/**\n * Sets a given payload as a GraphQL response body.\n * @example\n * res(ctx.data({ user: { firstName: 'John' }}))\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\n */\nexport const data: GraphQLPayloadContext<Record<string, unknown>> = (\n  payload,\n) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {}\n    const nextBody = mergeRight(prevBody, { data: payload })\n\n    return json(nextBody)(res)\n  }\n}\n", "import { jsonParse } from '../utils/internal/jsonParse'\nimport { mergeRight } from '../utils/internal/mergeRight'\nimport { json } from './json'\nimport { GraphQLPayloadContext } from '../typeUtils'\n\n/**\n * Sets the GraphQL extensions on a given response.\n * @example\n * res(ctx.extensions({ tracing: { version: 1 }}))\n * @see {@link https://mswjs.io/docs/api/context/extensions `ctx.extensions()`}\n */\nexport const extensions: GraphQLPayloadContext<Record<string, unknown>> = (\n  payload,\n) => {\n  return (res) => {\n    const prevBody = jsonParse(res.body) || {}\n    const nextBody = mergeRight(prevBody, { extensions: payload })\n    return json(nextBody)(res)\n  }\n}\n", "import { isNodeProcess } from 'is-node-process'\nimport { ResponseTransformer } from '../response'\n\nexport const SET_TIMEOUT_MAX_ALLOWED_INT = 2147483647\nexport const MIN_SERVER_RESPONSE_TIME = 100\nexport const MAX_SERVER_RESPONSE_TIME = 400\nexport const NODE_SERVER_RESPONSE_TIME = 5\n\nconst getRandomServerResponseTime = () => {\n  if (isNodeProcess()) {\n    return NODE_SERVER_RESPONSE_TIME\n  }\n\n  return Math.floor(\n    Math.random() * (MAX_SERVER_RESPONSE_TIME - MIN_SERVER_RESPONSE_TIME) +\n      MIN_SERVER_RESPONSE_TIME,\n  )\n}\n\nexport type DelayMode = 'real' | 'infinite'\n\n/**\n * Delays the response by the given duration (ms).\n * @example\n * res(ctx.delay(1200)) // delay response by 1200ms\n * res(ctx.delay()) // emulate realistic server response time\n * res(ctx.delay('infinite')) // delay response infinitely\n * @see {@link https://mswjs.io/docs/api/context/delay `ctx.delay()`}\n */\nexport const delay = (\n  durationOrMode?: DelayMode | number,\n): ResponseTransformer => {\n  return (res) => {\n    let delayTime: number\n\n    if (typeof durationOrMode === 'string') {\n      switch (durationOrMode) {\n        case 'infinite': {\n          // Using `Infinity` as a delay value executes the response timeout immediately.\n          // Instead, use the maximum allowed integer for `setTimeout`.\n          delayTime = SET_TIMEOUT_MAX_ALLOWED_INT\n          break\n        }\n        case 'real': {\n          delayTime = getRandomServerResponseTime()\n          break\n        }\n        default: {\n          throw new Error(\n            `Failed to delay a response: unknown delay mode \"${durationOrMode}\". Please make sure you provide one of the supported modes (\"real\", \"infinite\") or a number to \"ctx.delay\".`,\n          )\n        }\n      }\n    } else if (typeof durationOrMode === 'undefined') {\n      // Use random realistic server response time when no explicit delay duration was provided.\n      delayTime = getRandomServerResponseTime()\n    } else {\n      // Guard against passing values like `Infinity` or `Number.MAX_VALUE`\n      // as the response delay duration. They don't produce the result you may expect.\n      if (durationOrMode > SET_TIMEOUT_MAX_ALLOWED_INT) {\n        throw new Error(\n          `Failed to delay a response: provided delay duration (${durationOrMode}) exceeds the maximum allowed duration for \"setTimeout\" (${SET_TIMEOUT_MAX_ALLOWED_INT}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the \"infinite\" delay mode to delay the response indefinitely.`,\n        )\n      }\n\n      delayTime = durationOrMode\n    }\n\n    res.delay = delayTime\n    return res\n  }\n}\n", "import type { GraphQLError } from 'graphql'\nimport { ResponseTransformer } from '../response'\nimport { jsonParse } from '../utils/internal/jsonParse'\nimport { mergeRight } from '../utils/internal/mergeRight'\nimport { json } from './json'\n\n/**\n * Sets a given list of GraphQL errors on the mocked response.\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\n * @see {@link https://mswjs.io/docs/api/context/errors}\n */\nexport const errors = <\n  ErrorsType extends readonly Partial<GraphQLError>[] | null | undefined,\n>(\n  errorsList: ErrorsType,\n): ResponseTransformer<string> => {\n  return (res) => {\n    if (errorsList == null) {\n      return res\n    }\n\n    const prevBody = jsonParse(res.body) || {}\n    const nextBody = mergeRight(prevBody, { errors: errorsList })\n\n    return json(nextBody)(res as any) as any\n  }\n}\n", "import { isNodeProcess } from 'is-node-process'\nimport { Headers } from 'headers-polyfill'\nimport { MockedRequest } from '../utils/request/MockedRequest'\n\nconst useFetch: (input: RequestInfo, init?: RequestInit) => Promise<Response> =\n  isNodeProcess()\n    ? (input, init) =>\n        import('node-fetch').then(({ default: nodeFetch }) =>\n          (nodeFetch as unknown as typeof window.fetch)(input, init),\n        )\n    : globalThis.fetch\n\nexport const augmentRequestInit = (requestInit: RequestInit): RequestInit => {\n  const headers = new Headers(requestInit.headers)\n  headers.set('x-msw-bypass', 'true')\n\n  return {\n    ...requestInit,\n    headers: headers.all(),\n  }\n}\n\nconst createFetchRequestParameters = (input: MockedRequest): RequestInit => {\n  const { body, method } = input\n  const requestParameters: RequestInit = {\n    ...input,\n    body: undefined,\n  }\n\n  if (['GET', 'HEAD'].includes(method)) {\n    return requestParameters\n  }\n\n  if (\n    typeof body === 'object' ||\n    typeof body === 'number' ||\n    typeof body === 'boolean'\n  ) {\n    requestParameters.body = JSON.stringify(body)\n  } else {\n    requestParameters.body = body\n  }\n\n  return requestParameters\n}\n\n/**\n * Performs a bypassed request inside a request handler.\n * @example\n * const originalResponse = await ctx.fetch(req)\n * @see {@link https://mswjs.io/docs/api/context/fetch `ctx.fetch()`}\n */\nexport const fetch = (\n  input: string | MockedRequest,\n  requestInit: RequestInit = {},\n): Promise<Response> => {\n  if (typeof input === 'string') {\n    return useFetch(input, augmentRequestInit(requestInit))\n  }\n\n  const requestParameters = createFetchRequestParameters(input)\n  const derivedRequestInit = augmentRequestInit(requestParameters)\n\n  return useFetch(input.url.href, derivedRequestInit)\n}\n", "import { ResponseTransformer } from '../response'\n\n/**\n * Sets a textual response body. Appends a `Content-Type: text/plain`\n * header on the mocked response.\n * @example res(ctx.text('Successful response'))\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\n */\nexport const text = <BodyType extends string>(\n  body: BodyType,\n): ResponseTransformer<BodyType> => {\n  return (res) => {\n    res.headers.set('Content-Type', 'text/plain')\n    res.body = body\n    return res\n  }\n}\n", "import { ResponseTransformer } from '../response'\n\n/**\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\n * on the mocked response.\n * @example\n * res(ctx.xml('<node key=\"value\">Content</node>'))\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\n */\nexport const xml = <BodyType extends string>(\n  body: BodyType,\n): ResponseTransformer<BodyType> => {\n  return (res) => {\n    res.headers.set('Content-Type', 'text/xml')\n    res.body = body\n    return res\n  }\n}\n", "import { invariant } from 'outvariant'\nimport { devUtils } from './devUtils'\n\nexport function checkGlobals() {\n  /**\n   * MSW expects the \"URL\" constructor to be defined.\n   * It's not present in React Native so suggest a polyfill\n   * instead of failing silently.\n   * @see https://github.com/mswjs/msw/issues/1408\n   */\n  invariant(\n    typeof URL !== 'undefined',\n    devUtils.formatMessage(\n      `Global \"URL\" class is not defined. This likely means that you're running MSW in an environment that doesn't support all Node.js standard API (e.g. React Native). If that's the case, please use an appropriate polyfill for the \"URL\" class, like \"react-native-url-polyfill\".`,\n    ),\n  )\n}\n", "import { format } from 'outvariant'\n\nconst LIBRARY_PREFIX = '[MSW]'\n\n/**\n * Formats a given message by appending the library's prefix string.\n */\nfunction formatMessage(message: string, ...positionals: any[]): string {\n  const interpolatedMessage = format(message, ...positionals)\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`\n}\n\n/**\n * Prints a library-specific warning.\n */\nfunction warn(message: string, ...positionals: any[]): void {\n  console.warn(formatMessage(message, ...positionals))\n}\n\n/**\n * Prints a library-specific error.\n */\nfunction error(message: string, ...positionals: any[]): void {\n  console.error(formatMessage(message, ...positionals))\n}\n\nexport const devUtils = {\n  formatMessage,\n  warn,\n  error,\n}\n", "import { invariant } from 'outvariant'\nimport { isNodeProcess } from 'is-node-process'\nimport {\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n  WorkerLifecycleEventsMap,\n  StartReturnType,\n  StopHandler,\n  StartHandler,\n  StartOptions,\n} from './glossary'\nimport { createStartHandler } from './start/createStartHandler'\nimport { createStop } from './stop/createStop'\nimport { ServiceWorkerMessage } from './start/utils/createMessageChannel'\nimport { RequestHandler } from '../handlers/RequestHandler'\nimport { DEFAULT_START_OPTIONS } from './start/utils/prepareStartHandler'\nimport { createFallbackStart } from './start/createFallbackStart'\nimport { createFallbackStop } from './stop/createFallbackStop'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { SetupApi } from '../SetupApi'\nimport { mergeRight } from '../utils/internal/mergeRight'\nimport { SetupWorker } from './glossary'\n\ninterface Listener {\n  target: EventTarget\n  eventType: string\n  callback: EventListener\n}\n\nexport class SetupWorkerApi\n  extends SetupApi<WorkerLifecycleEventsMap>\n  implements SetupWorker\n{\n  private context: SetupWorkerInternalContext\n  private startHandler: StartHandler = null as any\n  private stopHandler: StopHandler = null as any\n  private listeners: Array<Listener>\n\n  constructor(...handlers: Array<RequestHandler>) {\n    super(...handlers)\n\n    invariant(\n      !isNodeProcess(),\n      devUtils.formatMessage(\n        'Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.',\n      ),\n    )\n\n    this.listeners = []\n    this.context = this.createWorkerContext()\n  }\n\n  private createWorkerContext(): SetupWorkerInternalContext {\n    const context = {\n      // Mocking is not considered enabled until the worker\n      // signals back the successful activation event.\n      isMockingEnabled: false,\n      startOptions: null as any,\n      worker: null,\n      registration: null,\n      requestHandlers: this.currentHandlers,\n      emitter: this.emitter,\n      workerChannel: {\n        on: <EventType extends keyof ServiceWorkerIncomingEventsMap>(\n          eventType: EventType,\n          callback: (\n            event: MessageEvent,\n            message: ServiceWorkerMessage<\n              EventType,\n              ServiceWorkerIncomingEventsMap[EventType]\n            >,\n          ) => void,\n        ) => {\n          this.context.events.addListener(\n            navigator.serviceWorker,\n            'message',\n            (event: MessageEvent) => {\n              // Avoid messages broadcasted from unrelated workers.\n              if (event.source !== this.context.worker) {\n                return\n              }\n\n              const message = event.data as ServiceWorkerMessage<\n                typeof eventType,\n                any\n              >\n\n              if (!message) {\n                return\n              }\n\n              if (message.type === eventType) {\n                callback(event, message)\n              }\n            },\n          )\n        },\n        send: (type: any) => {\n          this.context.worker?.postMessage(type)\n        },\n      },\n      events: {\n        addListener: (\n          target: EventTarget,\n          eventType: string,\n          callback: EventListener,\n        ) => {\n          target.addEventListener(eventType, callback)\n          this.listeners.push({ eventType, target, callback })\n\n          return () => {\n            target.removeEventListener(eventType, callback)\n          }\n        },\n        removeAllListeners: () => {\n          for (const { target, eventType, callback } of this.listeners) {\n            target.removeEventListener(eventType, callback)\n          }\n          this.listeners = []\n        },\n        once: <EventType extends keyof ServiceWorkerIncomingEventsMap>(\n          eventType: EventType,\n        ) => {\n          const bindings: Array<() => void> = []\n\n          return new Promise<\n            ServiceWorkerMessage<\n              typeof eventType,\n              ServiceWorkerIncomingEventsMap[typeof eventType]\n            >\n          >((resolve, reject) => {\n            const handleIncomingMessage = (event: MessageEvent) => {\n              try {\n                const message = event.data\n\n                if (message.type === eventType) {\n                  resolve(message)\n                }\n              } catch (error) {\n                reject(error)\n              }\n            }\n\n            bindings.push(\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'message',\n                handleIncomingMessage,\n              ),\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                'messageerror',\n                reject,\n              ),\n            )\n          }).finally(() => {\n            bindings.forEach((unbind) => unbind())\n          })\n        },\n      },\n      useFallbackMode:\n        !('serviceWorker' in navigator) || location.protocol === 'file:',\n    }\n\n    /**\n     * @todo Not sure I like this but \"this.currentHandlers\"\n     * updates never bubble to \"this.context.requestHandlers\".\n     */\n    Object.defineProperties(context, {\n      requestHandlers: {\n        get: () => this.currentHandlers,\n      },\n    })\n\n    this.startHandler = context.useFallbackMode\n      ? createFallbackStart(context)\n      : createStartHandler(context)\n\n    this.stopHandler = context.useFallbackMode\n      ? createFallbackStop(context)\n      : createStop(context)\n\n    return context\n  }\n\n  public async start(options: StartOptions = {}): StartReturnType {\n    this.context.startOptions = mergeRight(\n      DEFAULT_START_OPTIONS,\n      options,\n    ) as SetupWorkerInternalContext['startOptions']\n\n    return await this.startHandler(this.context.startOptions, options)\n  }\n\n  public printHandlers(): void {\n    const handlers = this.listHandlers()\n\n    handlers.forEach((handler) => {\n      const { header, callFrame } = handler.info\n      const pragma = handler.info.hasOwnProperty('operationType')\n        ? '[graphql]'\n        : '[rest]'\n\n      console.groupCollapsed(`${pragma} ${header}`)\n\n      if (callFrame) {\n        console.log(`Declaration: ${callFrame}`)\n      }\n\n      console.log('Handler:', handler)\n      console.groupEnd()\n    })\n  }\n\n  public stop(): void {\n    super.dispose()\n    this.context.events.removeAllListeners()\n    this.context.emitter.removeAllListeners()\n    this.stopHandler()\n  }\n}\n\n/**\n * Sets up a requests interception in the browser with the given request handlers.\n * @param {RequestHandler[]} handlers List of request handlers.\n * @see {@link https://mswjs.io/docs/api/setup-worker `setupWorker`}\n */\nexport function setupWorker(...handlers: Array<RequestHandler>): SetupWorker {\n  return new SetupWorkerApi(...handlers)\n}\n", "import { until } from '@open-draft/until'\nimport { getWorkerInstance } from './utils/getWorkerInstance'\nimport { enableMocking } from './utils/enableMocking'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { createRequestListener } from './createRequestListener'\nimport { requestIntegrityCheck } from '../../utils/internal/requestIntegrityCheck'\nimport { deferNetworkRequestsUntil } from '../../utils/deferNetworkRequestsUntil'\nimport { createResponseListener } from './createResponseListener'\nimport { validateWorkerScope } from './utils/validateWorkerScope'\nimport { devUtils } from '../../utils/internal/devUtils'\n\nexport const createStartHandler = (\n  context: SetupWorkerInternalContext,\n): StartHandler => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      // Remove all previously existing event listeners.\n      // This way none of the listeners persists between Fast refresh\n      // of the application's code.\n      context.events.removeAllListeners()\n\n      // Handle requests signaled by the worker.\n      context.workerChannel.on(\n        'REQUEST',\n        createRequestListener(context, options),\n      )\n\n      // Handle responses signaled by the worker.\n      context.workerChannel.on('RESPONSE', createResponseListener(context))\n\n      const instance = await getWorkerInstance(\n        options.serviceWorker.url,\n        options.serviceWorker.options,\n        options.findWorker,\n      )\n\n      const [worker, registration] = instance\n\n      if (!worker) {\n        const missingWorkerMessage = customOptions?.findWorker\n          ? devUtils.formatMessage(\n              `Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`,\n              options.serviceWorker.url,\n            )\n          : devUtils.formatMessage(\n              `Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\n              options.serviceWorker.url,\n              location.host,\n            )\n\n        throw new Error(missingWorkerMessage)\n      }\n\n      context.worker = worker\n      context.registration = registration\n\n      context.events.addListener(window, 'beforeunload', () => {\n        if (worker.state !== 'redundant') {\n          // Notify the Service Worker that this client has closed.\n          // Internally, it's similar to disabling the mocking, only\n          // client close event has a handler that self-terminates\n          // the Service Worker when there are no open clients.\n          context.workerChannel.send('CLIENT_CLOSED')\n        }\n        // Make sure we're always clearing the interval - there are reports that not doing this can\n        // cause memory leaks in headless browser environments.\n        window.clearInterval(context.keepAliveInterval)\n      })\n\n      // Check if the active Service Worker is the latest published one\n      const [integrityError] = await until(() =>\n        requestIntegrityCheck(context, worker),\n      )\n\n      if (integrityError) {\n        devUtils.error(`\\\nDetected outdated Service Worker: ${integrityError.message}\n\nThe mocking is still enabled, but it's highly recommended that you update your Service Worker by running:\n\n$ npx msw init <PUBLIC_DIR>\n\nThis is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.\nIf this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues\\\n      `)\n      }\n\n      context.keepAliveInterval = window.setInterval(\n        () => context.workerChannel.send('KEEPALIVE_REQUEST'),\n        5000,\n      )\n\n      // Warn the user when loading the page that lies outside\n      // of the worker's scope.\n      validateWorkerScope(registration, context.startOptions)\n\n      return registration\n    }\n\n    const workerRegistration = startWorkerInstance().then(\n      async (registration) => {\n        const pendingInstance = registration.installing || registration.waiting\n\n        // Wait until the worker is activated.\n        // Assume the worker is already activated if there's no pending registration\n        // (i.e. when reloading the page after a successful activation).\n        if (pendingInstance) {\n          await new Promise<void>((resolve) => {\n            pendingInstance.addEventListener('statechange', () => {\n              if (pendingInstance.state === 'activated') {\n                return resolve()\n              }\n            })\n          })\n        }\n\n        // Print the activation message only after the worker has been activated.\n        await enableMocking(context, options).catch((error) => {\n          throw new Error(`Failed to enable mocking: ${error?.message}`)\n        })\n\n        return registration\n      },\n    )\n\n    // Defer any network requests until the Service Worker instance is ready.\n    // This prevents a race condition between the Service Worker registration\n    // and application's runtime requests (i.e. requests on mount).\n    if (options.waitUntilReady) {\n      deferNetworkRequestsUntil(workerRegistration)\n    }\n\n    return workerRegistration\n  }\n}\n", "import { until } from '@open-draft/until'\nimport { getWorkerByRegistration } from './getWorkerByRegistration'\nimport { ServiceWorkerInstanceTuple, FindWorker } from '../../glossary'\nimport { getAbsoluteWorkerUrl } from '../../../utils/url/getAbsoluteWorkerUrl'\nimport { devUtils } from '../../../utils/internal/devUtils'\n\n/**\n * Returns an active Service Worker instance.\n * When not found, registers a new Service Worker.\n */\nexport const getWorkerInstance = async (\n  url: string,\n  options: RegistrationOptions = {},\n  findWorker: FindWorker,\n): Promise<ServiceWorkerInstanceTuple> => {\n  // Resolve the absolute Service Worker URL.\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url)\n\n  const mockRegistrations = await navigator.serviceWorker\n    .getRegistrations()\n    .then((registrations) =>\n      registrations.filter((registration) =>\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n      ),\n    )\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    // Reload the page when it has associated workers, but no active controller.\n    // The absence of a controller can mean either:\n    // - page has no Service Worker associated with it\n    // - page has been hard-reloaded and its workers won't be used until the next reload.\n    // Since we've checked that there are registrations associated with this page,\n    // at this point we are sure it's hard reload that falls into this clause.\n    location.reload()\n  }\n\n  const [existingRegistration] = mockRegistrations\n\n  if (existingRegistration) {\n    // When the Service Worker is registered, update it and return the reference.\n    return existingRegistration.update().then(() => {\n      return [\n        getWorkerByRegistration(\n          existingRegistration,\n          absoluteWorkerUrl,\n          findWorker,\n        ),\n        existingRegistration,\n      ]\n    })\n  }\n\n  // When the Service Worker wasn't found, register it anew and return the reference.\n  const [error, instance] = await until<ServiceWorkerInstanceTuple>(\n    async () => {\n      const registration = await navigator.serviceWorker.register(url, options)\n      return [\n        // Compare existing worker registration by its worker URL,\n        // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n        registration,\n      ]\n    },\n  )\n\n  // Handle Service Worker registration errors.\n  if (error) {\n    const isWorkerMissing = error.message.includes('(404)')\n\n    // Produce a custom error message when given a non-existing Service Worker url.\n    // Suggest developers to check their setup.\n    if (isWorkerMissing) {\n      const scopeUrl = new URL(options?.scope || '/', location.href)\n\n      throw new Error(\n        devUtils.formatMessage(`\\\nFailed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\n\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`),\n      )\n    }\n\n    // Fallback error message for any other registration errors.\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to register the Service Worker:\\n\\n%s',\n        error.message,\n      ),\n    )\n  }\n\n  return instance\n}\n", "import { FindWorker } from '../../glossary'\n\n/**\n * Attempts to resolve a Service Worker instance from a given registration,\n * regardless of its state (active, installing, waiting).\n */\nexport function getWorkerByRegistration(\n  registration: ServiceWorkerRegistration,\n  absoluteWorkerUrl: string,\n  findWorker: FindWorker,\n): ServiceWorker | null {\n  const allStates = [\n    registration.active,\n    registration.installing,\n    registration.waiting,\n  ]\n  const relevantStates = allStates.filter((state): state is ServiceWorker => {\n    return state != null\n  })\n  const worker = relevantStates.find((worker) => {\n    return findWorker(worker.scriptURL, absoluteWorkerUrl)\n  })\n\n  return worker || null\n}\n", "/**\n * Returns an absolute Service Worker URL based on the given\n * relative URL (known during the registration).\n */\nexport function getAbsoluteWorkerUrl(workerUrl: string): string {\n  return new URL(workerUrl, location.href).href\n}\n", "import { devUtils } from '../../../utils/internal/devUtils'\n\nexport interface PrintStartMessageArgs {\n  quiet?: boolean\n  message?: string\n  workerUrl?: string\n  workerScope?: string\n}\n\n/**\n * Prints a worker activation message in the browser's console.\n */\nexport function printStartMessage(args: PrintStartMessageArgs = {}) {\n  if (args.quiet) {\n    return\n  }\n\n  const message = args.message || 'Mocking enabled.'\n\n  console.groupCollapsed(\n    `%c${devUtils.formatMessage(message)}`,\n    'color:orangered;font-weight:bold;',\n  )\n  console.log(\n    '%cDocumentation: %chttps://mswjs.io/docs',\n    'font-weight:bold',\n    'font-weight:normal',\n  )\n  console.log('Found an issue? https://github.com/mswjs/msw/issues')\n\n  if (args.workerUrl) {\n    console.log('Worker script URL:', args.workerUrl)\n  }\n\n  if (args.workerScope) {\n    console.log('Worker scope:', args.workerScope)\n  }\n\n  console.groupEnd()\n}\n", "import { devUtils } from '../../../utils/internal/devUtils'\nimport { StartOptions, SetupWorkerInternalContext } from '../../glossary'\nimport { printStartMessage } from './printStartMessage'\n\n/**\n * Signals the worker to enable the interception of requests.\n */\nexport async function enableMocking(\n  context: SetupWorkerInternalContext,\n  options: StartOptions,\n) {\n  context.workerChannel.send('MOCK_ACTIVATE')\n  await context.events.once('MOCKING_ENABLED')\n\n  // Warn the developer on multiple \"worker.start()\" calls.\n  // While this will not affect the worker in any way,\n  // it likely indicates an issue with the developer's code.\n  if (context.isMockingEnabled) {\n    devUtils.warn(\n      `Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`,\n    )\n    return\n  }\n\n  context.isMockingEnabled = true\n\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: context.registration?.scope,\n    workerUrl: context.worker?.scriptURL,\n  })\n}\n", "import {\n  SerializedResponse,\n  ServiceWorkerIncomingEventsMap,\n} from '../../glossary'\n\nexport interface ServiceWorkerMessage<\n  EventType extends keyof ServiceWorkerIncomingEventsMap,\n  EventPayload,\n> {\n  type: EventType\n  payload: EventPayload\n}\n\ninterface WorkerChannelEventsMap {\n  MOCK_RESPONSE: [data: SerializedResponse<any>, body?: [ArrayBuffer]]\n  NOT_FOUND: []\n  NETWORK_ERROR: [data: { name: string; message: string }]\n}\n\nexport class WorkerChannel {\n  constructor(private readonly port: MessagePort) {}\n\n  public postMessage<Event extends keyof WorkerChannelEventsMap>(\n    event: Event,\n    ...rest: WorkerChannelEventsMap[Event]\n  ): void {\n    const [data, transfer] = rest\n    this.port.postMessage({ type: event, data }, { transfer })\n  }\n}\n", "export class NetworkError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'NetworkError'\n  }\n}\n", "import { encodeBuffer } from '@mswjs/interceptors'\nimport { Headers } from 'headers-polyfill'\nimport { ServiceWorkerIncomingRequest } from '../../setupWorker/glossary'\nimport { MockedRequest } from './MockedRequest'\n\n/**\n * Converts a given request received from the Service Worker\n * into a `MockedRequest` instance.\n */\nexport function parseWorkerRequest(\n  rawRequest: ServiceWorkerIncomingRequest,\n): MockedRequest {\n  const url = new URL(rawRequest.url)\n  const headers = new Headers(rawRequest.headers)\n\n  return new MockedRequest(url, {\n    ...rawRequest,\n    body: encodeBuffer(rawRequest.body || ''),\n    headers,\n  })\n}\n", "import * as cookieUtils from 'cookie'\nimport { store } from '@mswjs/cookies'\nimport { IsomorphicRequest, RequestInit } from '@mswjs/interceptors'\nimport { decodeBuffer } from '@mswjs/interceptors/lib/utils/bufferUtils.js'\nimport { Headers } from 'headers-polyfill'\nimport { DefaultBodyType } from '../../handlers/RequestHandler'\nimport { MockedResponse } from '../../response'\nimport { getRequestCookies } from './getRequestCookies'\nimport { parseBody } from './parseBody'\nimport { isStringEqual } from '../internal/isStringEqual'\n\nexport type RequestCache =\n  | 'default'\n  | 'no-store'\n  | 'reload'\n  | 'no-cache'\n  | 'force-cache'\n  | 'only-if-cached'\n\nexport type RequestMode = 'navigate' | 'same-origin' | 'no-cors' | 'cors'\n\nexport type RequestRedirect = 'follow' | 'error' | 'manual'\n\nexport type RequestDestination =\n  | ''\n  | 'audio'\n  | 'audioworklet'\n  | 'document'\n  | 'embed'\n  | 'font'\n  | 'frame'\n  | 'iframe'\n  | 'image'\n  | 'manifest'\n  | 'object'\n  | 'paintworklet'\n  | 'report'\n  | 'script'\n  | 'sharedworker'\n  | 'style'\n  | 'track'\n  | 'video'\n  | 'xslt'\n  | 'worker'\n\nexport type RequestPriority = 'high' | 'low' | 'auto'\n\nexport type RequestReferrerPolicy =\n  | ''\n  | 'no-referrer'\n  | 'no-referrer-when-downgrade'\n  | 'origin'\n  | 'origin-when-cross-origin'\n  | 'same-origin'\n  | 'strict-origin'\n  | 'strict-origin-when-cross-origin'\n  | 'unsafe-url'\n\nexport interface MockedRequestInit extends RequestInit {\n  id?: string\n  cache?: RequestCache\n  redirect?: RequestRedirect\n  integrity?: string\n  keepalive?: boolean\n  mode?: RequestMode\n  priority?: RequestPriority\n  destination?: RequestDestination\n  referrer?: string\n  referrerPolicy?: RequestReferrerPolicy\n  cookies?: Record<string, string>\n}\n\nexport class MockedRequest<\n  RequestBody extends DefaultBodyType = DefaultBodyType,\n> extends IsomorphicRequest {\n  public readonly cache: RequestCache\n  public readonly cookies: Record<string, string>\n  public readonly destination: RequestDestination\n  public readonly integrity: string\n  public readonly keepalive: boolean\n  public readonly mode: RequestMode\n  public readonly priority: RequestPriority\n  public readonly redirect: RequestRedirect\n  public readonly referrer: string\n  public readonly referrerPolicy: RequestReferrerPolicy\n\n  constructor(url: URL, init: MockedRequestInit = {}) {\n    super(url, init)\n    if (init.id) {\n      this.id = init.id\n    }\n    this.cache = init.cache || 'default'\n    this.destination = init.destination || ''\n    this.integrity = init.integrity || ''\n    this.keepalive = init.keepalive || false\n    this.mode = init.mode || 'cors'\n    this.priority = init.priority || 'auto'\n    this.redirect = init.redirect || 'follow'\n    this.referrer = init.referrer || ''\n    this.referrerPolicy = init.referrerPolicy || 'no-referrer'\n    this.cookies = init.cookies || this.getCookies()\n  }\n\n  /**\n   * Get parsed request body. The type is inferred from the content type.\n   *\n   * @deprecated - Use `req.text()`, `req.json()` or `req.arrayBuffer()`\n   * to read the request body as a plain text, JSON, or ArrayBuffer.\n   */\n  public get body(): RequestBody {\n    const text = decodeBuffer(this['_body'])\n\n    /**\n     * @deprecated https://github.com/mswjs/msw/issues/1318\n     * @fixme Remove this assumption and let the users read\n     * request body explicitly using \".json()\"/\".text()\"/\".arrayBuffer()\".\n     */\n    // Parse the request's body based on the \"Content-Type\" header.\n    const body = parseBody(text, this.headers)\n\n    if (isStringEqual(this.method, 'GET') && body === '') {\n      return undefined as RequestBody\n    }\n\n    return body as RequestBody\n  }\n\n  /**\n   * Bypass the intercepted request.\n   * This will make a call to the actual endpoint requested.\n   */\n  public passthrough(): MockedResponse<null> {\n    return {\n      // Constructing a dummy \"101 Continue\" mocked response\n      // to keep the return type of the resolver consistent.\n      status: 101,\n      statusText: 'Continue',\n      headers: new Headers(),\n      body: null,\n      // Setting \"passthrough\" to true will signal the response pipeline\n      // to perform this intercepted request as-is.\n      passthrough: true,\n      once: false,\n    }\n  }\n\n  private getCookies(): Record<string, string> {\n    // Parse the cookies passed in the original request \"cookie\" header.\n    const requestCookiesString = this.headers.get('cookie')\n    const ownCookies = requestCookiesString\n      ? cookieUtils.parse(requestCookiesString)\n      : {}\n\n    store.hydrate()\n\n    const cookiesFromStore = Array.from(\n      store.get({ ...this, url: this.url.href })?.entries(),\n    ).reduce((cookies, [name, { value }]) => {\n      return Object.assign(cookies, { [name.trim()]: value })\n    }, {})\n\n    // Get existing document cookies that are applicable\n    // to this request based on its \"credentials\" policy.\n    const cookiesFromDocument = getRequestCookies(this)\n\n    const forwardedCookies = {\n      ...cookiesFromDocument,\n      ...cookiesFromStore,\n    }\n\n    for (const [name, value] of Object.entries(forwardedCookies)) {\n      this.headers.append('cookie', `${name}=${value}`)\n    }\n\n    return {\n      ...forwardedCookies,\n      ...ownCookies,\n    }\n  }\n}\n", "import * as cookieUtils from 'cookie'\nimport { MockedRequest } from './MockedRequest'\n\nfunction getAllCookies() {\n  return cookieUtils.parse(document.cookie)\n}\n\n/**\n * Returns relevant document cookies based on the request `credentials` option.\n */\nexport function getRequestCookies(request: MockedRequest) {\n  /**\n   * @note No cookies persist on the document in Node.js: no document.\n   */\n  if (typeof document === 'undefined' || typeof location === 'undefined') {\n    return {}\n  }\n\n  switch (request.credentials) {\n    case 'same-origin': {\n      // Return document cookies only when requested a resource\n      // from the same origin as the current document.\n      return location.origin === request.url.origin ? getAllCookies() : {}\n    }\n\n    case 'include': {\n      // Return all document cookies.\n      return getAllCookies()\n    }\n\n    default: {\n      return {}\n    }\n  }\n}\n", "import { stringToHeaders } from 'headers-polyfill'\nimport { DefaultRequestMultipartBody } from '../../handlers/RequestHandler'\n\ninterface ParsedContentHeaders {\n  name: string\n  filename?: string\n  contentType: string\n}\n\ninterface ContentDispositionDirective {\n  [key: string]: string | undefined\n  name: string\n  filename?: string\n  'form-data': string\n}\n\nfunction parseContentHeaders(headersString: string): ParsedContentHeaders {\n  const headers = stringToHeaders(headersString)\n  const contentType = headers.get('content-type') || 'text/plain'\n  const disposition = headers.get('content-disposition')\n\n  if (!disposition) {\n    throw new Error('\"Content-Disposition\" header is required.')\n  }\n\n  const directives = disposition.split(';').reduce((acc, chunk) => {\n    const [name, ...rest] = chunk.trim().split('=')\n    acc[name] = rest.join('=')\n    return acc\n  }, {} as ContentDispositionDirective)\n\n  const name = directives.name?.slice(1, -1)\n  const filename = directives.filename?.slice(1, -1)\n\n  return {\n    name,\n    filename,\n    contentType,\n  }\n}\n\n/**\n * Parses a given string as a multipart/form-data.\n * Does not throw an exception on an invalid multipart string.\n */\nexport function parseMultipartData<T extends DefaultRequestMultipartBody>(\n  data: string,\n  headers?: Headers,\n): T | undefined {\n  const contentType = headers?.get('content-type')\n\n  if (!contentType) {\n    return undefined\n  }\n\n  const [, ...directives] = contentType.split(/; */)\n  const boundary = directives\n    .filter((d) => d.startsWith('boundary='))\n    .map((s) => s.replace(/^boundary=/, ''))[0]\n\n  if (!boundary) {\n    return undefined\n  }\n\n  const boundaryRegExp = new RegExp(`--+${boundary}`)\n  const fields = data\n    .split(boundaryRegExp)\n    .filter((chunk) => chunk.startsWith('\\r\\n') && chunk.endsWith('\\r\\n'))\n    .map((chunk) => chunk.trimStart().replace(/\\r\\n$/, ''))\n\n  if (!fields.length) {\n    return undefined\n  }\n\n  const parsedBody: DefaultRequestMultipartBody = {}\n\n  try {\n    for (const field of fields) {\n      const [contentHeaders, ...rest] = field.split('\\r\\n\\r\\n')\n      const contentBody = rest.join('\\r\\n\\r\\n')\n      const { contentType, filename, name } =\n        parseContentHeaders(contentHeaders)\n\n      const value =\n        filename === undefined\n          ? contentBody\n          : new File([contentBody], filename, { type: contentType })\n\n      const parsedValue = parsedBody[name]\n\n      if (parsedValue === undefined) {\n        parsedBody[name] = value\n      } else if (Array.isArray(parsedValue)) {\n        parsedBody[name] = [...parsedValue, value]\n      } else {\n        parsedBody[name] = [parsedValue, value]\n      }\n    }\n\n    return parsedBody as T\n  } catch (error) {\n    return undefined\n  }\n}\n", "import { jsonParse } from '../internal/jsonParse'\nimport { parseMultipartData } from '../internal/parseMultipartData'\nimport { MockedRequest } from './MockedRequest'\n\n/**\n * Parses a given request/response body based on the \"Content-Type\" header.\n */\nexport function parseBody(body?: MockedRequest['body'], headers?: Headers) {\n  // Return whatever falsey body value is given.\n  if (!body) {\n    return body\n  }\n\n  const contentType = headers?.get('content-type')?.toLowerCase() || ''\n\n  // If the body has a Multipart Content-Type\n  // parse it into an object.\n  const hasMultipartContent = contentType.startsWith('multipart/form-data')\n  if (hasMultipartContent && typeof body !== 'object') {\n    return parseMultipartData(body.toString(), headers) || body\n  }\n\n  // If the intercepted request's body has a JSON Content-Type\n  // parse it into an object.\n  const hasJsonContent = contentType.includes('json')\n\n  if (hasJsonContent && typeof body !== 'object') {\n    return jsonParse(body.toString()) || body\n  }\n\n  // Otherwise leave as-is.\n  return body\n}\n", "/**\n * Performs a case-insensitive comparison of two given strings.\n */\nexport function isStringEqual(actual: string, expected: string): boolean {\n  return actual.toLowerCase() === expected.toLowerCase()\n}\n", "import { until } from '@open-draft/until'\nimport { Emitter } from 'strict-event-emitter'\nimport { RequestHandler } from '../handlers/RequestHandler'\nimport { ServerLifecycleEventsMap } from '../node/glossary'\nimport { MockedResponse } from '../response'\nimport { SharedOptions } from '../sharedOptions'\nimport { RequiredDeep } from '../typeUtils'\nimport { ResponseLookupResult, getResponse } from './getResponse'\nimport { devUtils } from './internal/devUtils'\nimport { MockedRequest } from './request/MockedRequest'\nimport { onUnhandledRequest } from './request/onUnhandledRequest'\nimport { readResponseCookies } from './request/readResponseCookies'\n\nexport interface HandleRequestOptions<ResponseType> {\n  /**\n   * Options for the response resolution process.\n   */\n  resolutionContext?: {\n    baseUrl?: string\n  }\n\n  /**\n   * Transforms a `MockedResponse` instance returned from a handler\n   * to a response instance supported by the lower tooling (i.e. interceptors).\n   */\n  transformResponse?(response: MockedResponse<string>): ResponseType\n\n  /**\n   * Invoked whenever a request is performed as-is.\n   */\n  onPassthroughResponse?(request: MockedRequest): void\n\n  /**\n   * Invoked when the mocked response is ready to be sent.\n   */\n  onMockedResponse?(\n    response: ResponseType,\n    handler: RequiredDeep<ResponseLookupResult>,\n  ): void\n}\n\nexport async function handleRequest<\n  ResponseType extends Record<string, any> = MockedResponse<string>,\n>(\n  request: MockedRequest,\n  handlers: RequestHandler[],\n  options: RequiredDeep<SharedOptions>,\n  emitter: Emitter<ServerLifecycleEventsMap>,\n  handleRequestOptions?: HandleRequestOptions<ResponseType>,\n): Promise<ResponseType | undefined> {\n  emitter.emit('request:start', request)\n\n  // Perform bypassed requests (i.e. issued via \"ctx.fetch\") as-is.\n  if (request.headers.get('x-msw-bypass') === 'true') {\n    emitter.emit('request:end', request)\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Resolve a mocked response from the list of request handlers.\n  const [lookupError, lookupResult] = await until(() => {\n    return getResponse(\n      request,\n      handlers,\n      handleRequestOptions?.resolutionContext,\n    )\n  })\n\n  if (lookupError) {\n    // Allow developers to react to unhandled exceptions in request handlers.\n    emitter.emit('unhandledException', lookupError, request)\n    throw lookupError\n  }\n\n  const { handler, response } = lookupResult\n\n  // When there's no handler for the request, consider it unhandled.\n  // Allow the developer to react to such cases.\n  if (!handler) {\n    onUnhandledRequest(request, handlers, options.onUnhandledRequest)\n    emitter.emit('request:unhandled', request)\n    emitter.emit('request:end', request)\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // When the handled request returned no mocked response, warn the developer,\n  // as it may be an oversight on their part. Perform the request as-is.\n  if (!response) {\n    devUtils.warn(\n      `\\\nExpected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.\\\n\\n\n  \\u2022 %s\n    %s\\\n`,\n      response,\n      handler.info.header,\n      handler.info.callFrame,\n    )\n\n    emitter.emit('request:end', request)\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // When the developer explicitly returned \"req.passthrough()\" do not warn them.\n  // Perform the request as-is.\n  if (response.passthrough) {\n    emitter.emit('request:end', request)\n    handleRequestOptions?.onPassthroughResponse?.(request)\n    return\n  }\n\n  // Store all the received response cookies in the virtual cookie store.\n  readResponseCookies(request, response)\n\n  emitter.emit('request:match', request)\n\n  const requiredLookupResult =\n    lookupResult as RequiredDeep<ResponseLookupResult>\n\n  const transformedResponse =\n    handleRequestOptions?.transformResponse?.(response) ||\n    (response as any as ResponseType)\n\n  handleRequestOptions?.onMockedResponse?.(\n    transformedResponse,\n    requiredLookupResult,\n  )\n\n  emitter.emit('request:end', request)\n\n  return transformedResponse\n}\n", "import { MockedResponse } from '../response'\nimport {\n  RequestHandler,\n  RequestHandlerExecutionResult,\n} from '../handlers/RequestHandler'\nimport { MockedRequest } from './request/MockedRequest'\n\nexport interface ResponseLookupResult {\n  handler?: RequestHandler\n  publicRequest?: any\n  parsedRequest?: any\n  response?: MockedResponse\n}\n\nexport interface ResponseResolutionContext {\n  baseUrl?: string\n}\n\n/**\n * Returns a mocked response for a given request using following request handlers.\n */\nexport const getResponse = async <\n  Request extends MockedRequest,\n  Handler extends RequestHandler[],\n>(\n  request: Request,\n  handlers: Handler,\n  resolutionContext?: ResponseResolutionContext,\n): Promise<ResponseLookupResult> => {\n  const relevantHandlers = handlers.filter((handler) => {\n    return handler.test(request, resolutionContext)\n  })\n\n  if (relevantHandlers.length === 0) {\n    return {\n      handler: undefined,\n      response: undefined,\n    }\n  }\n\n  const result = await relevantHandlers.reduce<\n    Promise<RequestHandlerExecutionResult<any> | null>\n  >(async (executionResult, handler) => {\n    const previousResults = await executionResult\n\n    if (!!previousResults?.response) {\n      return executionResult\n    }\n\n    const result = await handler.run(request, resolutionContext)\n\n    if (result === null || result.handler.shouldSkip) {\n      return null\n    }\n\n    if (!result.response) {\n      return {\n        request: result.request,\n        handler: result.handler,\n        response: undefined,\n        parsedResult: result.parsedResult,\n      }\n    }\n\n    if (result.response.once) {\n      handler.markAsSkipped(true)\n    }\n\n    return result\n  }, Promise.resolve(null))\n\n  // Although reducing a list of relevant request handlers, it's possible\n  // that in the end there will be no handler associted with the request\n  // (i.e. if relevant handlers are fall-through).\n  if (!result) {\n    return {\n      handler: undefined,\n      response: undefined,\n    }\n  }\n\n  return {\n    handler: result.handler,\n    publicRequest: result.request,\n    parsedRequest: result.parsedResult,\n    response: result.response,\n  }\n}\n", "import getStringMatchScore from 'js-levenshtein'\nimport {\n  ParsedGraphQLQuery,\n  parseGraphQLRequest,\n} from '../internal/parseGraphQLRequest'\nimport { getPublicUrlFromRequest } from './getPublicUrlFromRequest'\nimport { isStringEqual } from '../internal/isStringEqual'\nimport { RestHandler } from '../../handlers/RestHandler'\nimport { GraphQLHandler } from '../../handlers/GraphQLHandler'\nimport { RequestHandler } from '../../handlers/RequestHandler'\nimport { tryCatch } from '../internal/tryCatch'\nimport { devUtils } from '../internal/devUtils'\nimport { MockedRequest } from './MockedRequest'\n\nconst MAX_MATCH_SCORE = 3\nconst MAX_SUGGESTION_COUNT = 4\nconst TYPE_MATCH_DELTA = 0.5\n\nexport interface UnhandledRequestPrint {\n  warning(): void\n  error(): void\n}\n\nexport type UnhandledRequestCallback = (\n  request: MockedRequest,\n  print: UnhandledRequestPrint,\n) => void\n\nexport type UnhandledRequestStrategy =\n  | 'bypass'\n  | 'warn'\n  | 'error'\n  | UnhandledRequestCallback\n\ninterface RequestHandlerGroups {\n  rest: RestHandler[]\n  graphql: GraphQLHandler[]\n}\n\nfunction groupHandlersByType(handlers: RequestHandler[]): RequestHandlerGroups {\n  return handlers.reduce<RequestHandlerGroups>(\n    (groups, handler) => {\n      if (handler instanceof RestHandler) {\n        groups.rest.push(handler)\n      }\n\n      if (handler instanceof GraphQLHandler) {\n        groups.graphql.push(handler)\n      }\n\n      return groups\n    },\n    {\n      rest: [],\n      graphql: [],\n    },\n  )\n}\n\ntype RequestHandlerSuggestion = [number, RequestHandler]\n\ntype ScoreGetterFn<RequestHandlerType extends RequestHandler> = (\n  request: MockedRequest,\n  handler: RequestHandlerType,\n) => number\n\nfunction getRestHandlerScore(): ScoreGetterFn<RestHandler> {\n  return (request, handler) => {\n    const { path, method } = handler.info\n\n    if (path instanceof RegExp || method instanceof RegExp) {\n      return Infinity\n    }\n\n    const hasSameMethod = isStringEqual(request.method, method)\n\n    // Always treat a handler with the same method as a more similar one.\n    const methodScoreDelta = hasSameMethod ? TYPE_MATCH_DELTA : 0\n    const requestPublicUrl = getPublicUrlFromRequest(request)\n    const score = getStringMatchScore(requestPublicUrl, path)\n\n    return score - methodScoreDelta\n  }\n}\n\nfunction getGraphQLHandlerScore(\n  parsedQuery: ParsedGraphQLQuery,\n): ScoreGetterFn<GraphQLHandler> {\n  return (_, handler) => {\n    if (typeof parsedQuery.operationName === 'undefined') {\n      return Infinity\n    }\n\n    const { operationType, operationName } = handler.info\n\n    if (typeof operationName !== 'string') {\n      return Infinity\n    }\n\n    const hasSameOperationType = parsedQuery.operationType === operationType\n    // Always treat a handler with the same operation type as a more similar one.\n    const operationTypeScoreDelta = hasSameOperationType ? TYPE_MATCH_DELTA : 0\n    const score = getStringMatchScore(parsedQuery.operationName, operationName)\n\n    return score - operationTypeScoreDelta\n  }\n}\n\nfunction getSuggestedHandler(\n  request: MockedRequest,\n  handlers: RestHandler[] | GraphQLHandler[],\n  getScore: ScoreGetterFn<RestHandler> | ScoreGetterFn<GraphQLHandler>,\n): RequestHandler[] {\n  const suggestedHandlers = (handlers as RequestHandler[])\n    .reduce<RequestHandlerSuggestion[]>((suggestions, handler) => {\n      const score = getScore(request, handler as any)\n      return suggestions.concat([[score, handler]])\n    }, [])\n    .sort(([leftScore], [rightScore]) => leftScore - rightScore)\n    .filter(([score]) => score <= MAX_MATCH_SCORE)\n    .slice(0, MAX_SUGGESTION_COUNT)\n    .map(([, handler]) => handler)\n\n  return suggestedHandlers\n}\n\nfunction getSuggestedHandlersMessage(handlers: RequestHandler[]) {\n  if (handlers.length > 1) {\n    return `\\\nDid you mean to request one of the following resources instead?\n\n${handlers.map((handler) => `  • ${handler.info.header}`).join('\\n')}`\n  }\n\n  return `Did you mean to request \"${handlers[0].info.header}\" instead?`\n}\n\nexport function onUnhandledRequest(\n  request: MockedRequest,\n  handlers: RequestHandler[],\n  strategy: UnhandledRequestStrategy = 'warn',\n): void {\n  const parsedGraphQLQuery = tryCatch(() => parseGraphQLRequest(request))\n\n  function generateHandlerSuggestion(): string {\n    /**\n     * @note Ignore exceptions during GraphQL request parsing because at this point\n     * we cannot assume the unhandled request is a valid GraphQL request.\n     * If the GraphQL parsing fails, just don't treat it as a GraphQL request.\n     */\n    const handlerGroups = groupHandlersByType(handlers)\n    const relevantHandlers = parsedGraphQLQuery\n      ? handlerGroups.graphql\n      : handlerGroups.rest\n\n    const suggestedHandlers = getSuggestedHandler(\n      request,\n      relevantHandlers,\n      parsedGraphQLQuery\n        ? getGraphQLHandlerScore(parsedGraphQLQuery)\n        : getRestHandlerScore(),\n    )\n\n    return suggestedHandlers.length > 0\n      ? getSuggestedHandlersMessage(suggestedHandlers)\n      : ''\n  }\n\n  function generateUnhandledRequestMessage(): string {\n    const publicUrl = getPublicUrlFromRequest(request)\n    const requestHeader = parsedGraphQLQuery\n      ? `${parsedGraphQLQuery.operationType} ${parsedGraphQLQuery.operationName} (${request.method} ${publicUrl})`\n      : `${request.method} ${publicUrl}`\n    const handlerSuggestion = generateHandlerSuggestion()\n\n    const messageTemplate = [\n      `captured a request without a matching request handler:`,\n      `  \\u2022 ${requestHeader}`,\n      handlerSuggestion,\n      `\\\nIf you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/getting-started/mocks\\\n`,\n    ].filter(Boolean)\n    return messageTemplate.join('\\n\\n')\n  }\n\n  function applyStrategy(strategy: UnhandledRequestStrategy) {\n    // Generate handler suggestions only when applying the strategy.\n    // This saves bandwidth for scenarios when developers opt-out\n    // from the default unhandled request handling strategy.\n    const message = generateUnhandledRequestMessage()\n\n    switch (strategy) {\n      case 'error': {\n        // Print a developer-friendly error.\n        devUtils.error('Error: %s', message)\n\n        // Throw an exception to halt request processing and not perform the original request.\n        throw new Error(\n          devUtils.formatMessage(\n            'Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.',\n          ),\n        )\n      }\n\n      case 'warn': {\n        devUtils.warn('Warning: %s', message)\n        break\n      }\n\n      case 'bypass':\n        break\n\n      default:\n        throw new Error(\n          devUtils.formatMessage(\n            'Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.',\n            strategy,\n          ),\n        )\n    }\n  }\n\n  if (typeof strategy === 'function') {\n    strategy(request, {\n      warning: applyStrategy.bind(null, 'warn'),\n      error: applyStrategy.bind(null, 'error'),\n    })\n    return\n  }\n\n  applyStrategy(strategy)\n}\n", "import type {\n  DocumentNode,\n  OperationDefinitionNode,\n  OperationTypeNode,\n} from 'graphql'\nimport { parse } from 'graphql'\nimport { GraphQLVariables } from '../../handlers/GraphQLHandler'\nimport { getPublicUrlFromRequest } from '../request/getPublicUrlFromRequest'\nimport { MockedRequest } from '../request/MockedRequest'\nimport { devUtils } from './devUtils'\nimport { jsonParse } from './jsonParse'\n\ninterface GraphQLInput {\n  query: string | null\n  variables?: GraphQLVariables\n}\n\nexport interface ParsedGraphQLQuery {\n  operationType: OperationTypeNode\n  operationName?: string\n}\n\nexport type ParsedGraphQLRequest<\n  VariablesType extends GraphQLVariables = GraphQLVariables,\n> =\n  | (ParsedGraphQLQuery & {\n      variables?: VariablesType\n    })\n  | undefined\n\nexport function parseDocumentNode(node: DocumentNode): ParsedGraphQLQuery {\n  const operationDef = node.definitions.find((def) => {\n    return def.kind === 'OperationDefinition'\n  }) as OperationDefinitionNode\n\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value,\n  }\n}\n\nfunction parseQuery(query: string): ParsedGraphQLQuery | Error {\n  try {\n    const ast = parse(query)\n    return parseDocumentNode(ast)\n  } catch (error) {\n    return error as Error\n  }\n}\n\nexport type GraphQLParsedOperationsMap = Record<string, string[]>\nexport type GraphQLMultipartRequestBody = {\n  operations: string\n  map?: string\n} & {\n  [fileName: string]: File\n}\n\nfunction extractMultipartVariables<VariablesType extends GraphQLVariables>(\n  variables: VariablesType,\n  map: GraphQLParsedOperationsMap,\n  files: Record<string, File>,\n) {\n  const operations = { variables }\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`)\n    }\n\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split('.').reverse()\n      const paths = reversedPaths.reverse()\n      let target: Record<string, any> = operations\n\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`)\n        }\n\n        target = target[path]\n      }\n\n      target[lastPath] = files[key]\n    }\n  }\n  return operations.variables\n}\n\nfunction getGraphQLInput(request: MockedRequest<any>): GraphQLInput | null {\n  switch (request.method) {\n    case 'GET': {\n      const query = request.url.searchParams.get('query')\n      const variables = request.url.searchParams.get('variables') || ''\n\n      return {\n        query,\n        variables: jsonParse(variables),\n      }\n    }\n\n    case 'POST': {\n      if (request.body?.query) {\n        const { query, variables } = request.body\n\n        return {\n          query,\n          variables,\n        }\n      }\n\n      // Handle multipart body operations.\n      if (request.body?.operations) {\n        const { operations, map, ...files } =\n          request.body as GraphQLMultipartRequestBody\n        const parsedOperations =\n          jsonParse<{ query?: string; variables?: GraphQLVariables }>(\n            operations,\n          ) || {}\n\n        if (!parsedOperations.query) {\n          return null\n        }\n\n        const parsedMap = jsonParse<GraphQLParsedOperationsMap>(map || '') || {}\n        const variables = parsedOperations.variables\n          ? extractMultipartVariables(\n              parsedOperations.variables,\n              parsedMap,\n              files,\n            )\n          : {}\n\n        return {\n          query: parsedOperations.query,\n          variables,\n        }\n      }\n    }\n\n    default:\n      return null\n  }\n}\n\n/**\n * Determines if a given request can be considered a GraphQL request.\n * Does not parse the query and does not guarantee its validity.\n */\nexport function parseGraphQLRequest(\n  request: MockedRequest<any>,\n): ParsedGraphQLRequest {\n  const input = getGraphQLInput(request)\n\n  if (!input || !input.query) {\n    return undefined\n  }\n\n  const { query, variables } = input\n  const parsedResult = parseQuery(query)\n\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = getPublicUrlFromRequest(request)\n\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message,\n      ),\n    )\n  }\n\n  return {\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables,\n  }\n}\n", "import { MockedRequest } from './MockedRequest'\n\n/**\n * Returns a relative URL if the given request URL is relative to the current origin.\n * Otherwise returns an absolute URL.\n */\nexport const getPublicUrlFromRequest = (request: MockedRequest) => {\n  return request.referrer.startsWith(request.url.origin)\n    ? request.url.pathname\n    : new URL(\n        request.url.pathname,\n        `${request.url.protocol}//${request.url.host}`,\n      ).href\n}\n", "export enum StatusCodeColor {\n  Success = '#69AB32',\n  Warning = '#F0BB4B',\n  Danger = '#E95F5D',\n}\n\n/**\n * Returns a HEX color for a given response status code number.\n */\nexport function getStatusCodeColor(status: number): StatusCodeColor {\n  if (status < 300) {\n    return StatusCodeColor.Success\n  }\n\n  if (status < 400) {\n    return StatusCodeColor.Warning\n  }\n\n  return StatusCodeColor.Danger\n}\n", "/**\n * Returns a timestamp string in a \"HH:MM:SS\" format.\n */\nexport function getTimestamp(): string {\n  const now = new Date()\n\n  return [now.getHours(), now.getMinutes(), now.getSeconds()]\n    .map(String)\n    .map((chunk) => chunk.slice(0, 2))\n    .map((chunk) => chunk.padStart(2, '0'))\n    .join(':')\n}\n", "import type { DefaultBodyType } from '../../handlers/RequestHandler.js'\nimport type { MockedRequest } from '../request/MockedRequest.js'\n\nexport interface LoggedRequest {\n  id: string\n  url: URL\n  method: string\n  headers: Record<string, string>\n  cookies: Record<string, string>\n  body: DefaultBodyType\n}\n\n/**\n * Formats a mocked request for introspection in browser's console.\n */\nexport function prepareRequest(request: MockedRequest): LoggedRequest {\n  return {\n    ...request,\n    body: request.body,\n    headers: request.headers.all(),\n  }\n}\n", "import { objectToHeaders } from 'headers-polyfill'\nimport { SerializedResponse } from '../../setupWorker/glossary'\nimport { parseBody } from '../request/parseBody'\n\n/**\n * Formats a mocked response for introspection in the browser's console.\n */\nexport function prepareResponse(res: SerializedResponse<string>) {\n  const responseHeaders = objectToHeaders(res.headers)\n\n  // Parse a response JSON body for preview in the logs\n  const parsedBody = parseBody(res.body, responseHeaders)\n\n  return {\n    ...res,\n    body: parsedBody,\n  }\n}\n", "import { match } from 'path-to-regexp'\nimport { getCleanUrl } from '@mswjs/interceptors/lib/utils/getCleanUrl.js'\nimport { normalizePath } from './normalizePath'\n\nexport type Path = string | RegExp\nexport type PathParams<KeyType extends keyof any = string> = {\n  [ParamName in KeyType]: string | ReadonlyArray<string>\n}\n\nexport interface Match {\n  matches: boolean\n  params?: PathParams\n}\n\n/**\n * Coerce a path supported by MSW into a path\n * supported by \"path-to-regexp\".\n */\nexport function coercePath(path: string): string {\n  return (\n    path\n      /**\n       * Replace wildcards (\"*\") with unnamed capturing groups\n       * because \"path-to-regexp\" doesn't support wildcards.\n       * Ignore path parameter' modifiers (i.e. \":name*\").\n       */\n      .replace(\n        /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n        (_, parameterName: string | undefined, wildcard: string) => {\n          const expression = '(.*)'\n\n          if (!parameterName) {\n            return expression\n          }\n\n          return parameterName.startsWith(':')\n            ? `${parameterName}${wildcard}`\n            : `${parameterName}${expression}`\n        },\n      )\n      /**\n       * Escape the port so that \"path-to-regexp\" can match\n       * absolute URLs including port numbers.\n       */\n      .replace(/([^\\/])(:)(?=\\d+)/, '$1\\\\$2')\n      /**\n       * Escape the protocol so that \"path-to-regexp\" could match\n       * absolute URL.\n       * @see https://github.com/pillarjs/path-to-regexp/issues/259\n       */\n      .replace(/^([^\\/]+)(:)(?=\\/\\/)/, '$1\\\\$2')\n  )\n}\n\n/**\n * Returns the result of matching given request URL against a mask.\n */\nexport function matchRequestUrl(url: URL, path: Path, baseUrl?: string): Match {\n  const normalizedPath = normalizePath(path, baseUrl)\n  const cleanPath =\n    typeof normalizedPath === 'string'\n      ? coercePath(normalizedPath)\n      : normalizedPath\n\n  const cleanUrl = getCleanUrl(url)\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl)\n  const params = (result && (result.params as PathParams)) || {}\n\n  return {\n    matches: result !== false,\n    params,\n  }\n}\n", "const REDUNDANT_CHARACTERS_EXP = /[\\?|#].*$/g\n\nexport function getSearchParams(path: string) {\n  return new URL(`/${path}`, 'http://localhost').searchParams\n}\n\n/**\n * Removes query parameters and hashes from a given URL string.\n */\nexport function cleanUrl(path: string): string {\n  return path.replace(REDUNDANT_CHARACTERS_EXP, '')\n}\n", "/**\n * Determines if the given URL string is an absolute URL.\n */\nexport function isAbsoluteUrl(url: string): boolean {\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url)\n}\n", "import { isAbsoluteUrl } from './isAbsoluteUrl'\n\n/**\n * Returns an absolute URL based on the given path.\n */\nexport function getAbsoluteUrl(path: string, baseUrl?: string): string {\n  // already absolute URL\n  if (isAbsoluteUrl(path)) {\n    return path\n  }\n\n  // Ignore path with pattern start with *\n  if (path.startsWith('*')) {\n    return path\n  }\n\n  // Resolve a relative request URL against a given custom \"baseUrl\"\n  // or the document baseURI (in the case of browser/browser-like environments).\n  const origin =\n    baseUrl || (typeof document !== 'undefined' && document.baseURI)\n\n  return origin\n    ? // Encode and decode the path to preserve escaped characters.\n      decodeURI(new URL(encodeURI(path), origin).href)\n    : path\n}\n", "import type { Path } from './matchRequestUrl'\nimport { cleanUrl } from '../url/cleanUrl'\nimport { getAbsoluteUrl } from '../url/getAbsoluteUrl'\n\n/**\n * Normalizes a given request handler path:\n * - Preserves RegExp.\n * - Removes query parameters and hashes.\n * - Rebases relative URLs against the \"baseUrl\" or the current location.\n * - Preserves relative URLs in Node.js, unless specified otherwise.\n */\nexport function normalizePath(path: Path, baseUrl?: string): Path {\n  // RegExp paths do not need normalization.\n  if (path instanceof RegExp) {\n    return path\n  }\n\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl)\n\n  return cleanUrl(maybeAbsoluteUrl)\n}\n", "import { Headers } from 'headers-polyfill'\nimport {\n  MaybePromise,\n  MockedResponse,\n  response,\n  ResponseComposition,\n} from '../response'\nimport { getCallFrame } from '../utils/internal/getCallFrame'\nimport { isIterable } from '../utils/internal/isIterable'\nimport { status } from '../context/status'\nimport { set } from '../context/set'\nimport { delay } from '../context/delay'\nimport { fetch } from '../context/fetch'\nimport { ResponseResolutionContext } from '../utils/getResponse'\nimport { SerializedResponse } from '../setupWorker/glossary'\nimport { MockedRequest } from '../utils/request/MockedRequest'\n\nexport type DefaultContext = {\n  status: typeof status\n  set: typeof set\n  delay: typeof delay\n  fetch: typeof fetch\n}\n\nexport const defaultContext: DefaultContext = {\n  status,\n  set,\n  delay,\n  fetch,\n}\n\nexport type DefaultRequestMultipartBody = Record<\n  string,\n  string | File | (string | File)[]\n>\n\nexport type DefaultBodyType =\n  | Record<string, any>\n  | DefaultRequestMultipartBody\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\nexport interface RequestHandlerDefaultInfo {\n  header: string\n}\n\nexport interface RequestHandlerInternalInfo {\n  callFrame?: string\n}\n\ntype ContextMap = Record<string, (...args: any[]) => any>\n\nexport type ResponseResolverReturnType<ReturnType> =\n  | ReturnType\n  | undefined\n  | void\n\nexport type MaybeAsyncResponseResolverReturnType<ReturnType> = MaybePromise<\n  ResponseResolverReturnType<ReturnType>\n>\n\nexport type AsyncResponseResolverReturnType<ReturnType> =\n  | MaybeAsyncResponseResolverReturnType<ReturnType>\n  | Generator<\n      MaybeAsyncResponseResolverReturnType<ReturnType>,\n      MaybeAsyncResponseResolverReturnType<ReturnType>,\n      MaybeAsyncResponseResolverReturnType<ReturnType>\n    >\n\nexport type ResponseResolver<\n  RequestType = MockedRequest,\n  ContextType = typeof defaultContext,\n  BodyType extends DefaultBodyType = any,\n> = (\n  req: RequestType,\n  res: ResponseComposition<BodyType>,\n  context: ContextType,\n) => AsyncResponseResolverReturnType<MockedResponse<BodyType>>\n\nexport interface RequestHandlerOptions<HandlerInfo> {\n  info: HandlerInfo\n  resolver: ResponseResolver<any, any>\n  ctx?: ContextMap\n}\n\nexport interface RequestHandlerExecutionResult<PublicRequestType> {\n  handler: RequestHandler\n  parsedResult: any\n  request: PublicRequestType\n  response?: MockedResponse\n}\n\nexport abstract class RequestHandler<\n  HandlerInfo extends RequestHandlerDefaultInfo = RequestHandlerDefaultInfo,\n  Request extends MockedRequest = MockedRequest,\n  ParsedResult = any,\n  PublicRequest extends MockedRequest = Request,\n> {\n  public info: HandlerInfo & RequestHandlerInternalInfo\n  public shouldSkip: boolean\n\n  private ctx: ContextMap\n  private resolverGenerator?: Generator<\n    MaybeAsyncResponseResolverReturnType<any>,\n    MaybeAsyncResponseResolverReturnType<any>,\n    MaybeAsyncResponseResolverReturnType<any>\n  >\n  private resolverGeneratorResult?: MaybeAsyncResponseResolverReturnType<any>\n\n  protected resolver: ResponseResolver<any, any>\n\n  constructor(options: RequestHandlerOptions<HandlerInfo>) {\n    this.shouldSkip = false\n    this.ctx = options.ctx || defaultContext\n    this.resolver = options.resolver\n\n    const callFrame = getCallFrame(new Error())\n\n    this.info = {\n      ...options.info,\n      callFrame,\n    }\n  }\n\n  /**\n   * Determine if the captured request should be mocked.\n   */\n  abstract predicate(\n    request: MockedRequest,\n    parsedResult: ParsedResult,\n    resolutionContext?: ResponseResolutionContext,\n  ): boolean\n\n  /**\n   * Print out the successfully handled request.\n   */\n  abstract log(\n    request: Request,\n    response: SerializedResponse<any>,\n    parsedResult: ParsedResult,\n  ): void\n\n  /**\n   * Parse the captured request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  parse(\n    _request: MockedRequest,\n    _resolutionContext?: ResponseResolutionContext,\n  ): ParsedResult {\n    return null as any\n  }\n\n  /**\n   * Test if this handler matches the given request.\n   */\n  public test(\n    request: MockedRequest,\n    resolutionContext?: ResponseResolutionContext,\n  ): boolean {\n    return this.predicate(\n      request,\n      this.parse(request, resolutionContext),\n      resolutionContext,\n    )\n  }\n\n  /**\n   * Derive the publicly exposed request (`req`) instance of the response resolver\n   * from the captured request and its parsed result.\n   */\n  protected getPublicRequest(\n    request: MockedRequest,\n    _parsedResult: ParsedResult,\n  ) {\n    return request as PublicRequest\n  }\n\n  public markAsSkipped(shouldSkip = true) {\n    this.shouldSkip = shouldSkip\n  }\n\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  public async run(\n    request: MockedRequest,\n    resolutionContext?: ResponseResolutionContext,\n  ): Promise<RequestHandlerExecutionResult<PublicRequest> | null> {\n    if (this.shouldSkip) {\n      return null\n    }\n\n    const parsedResult = this.parse(request, resolutionContext)\n    const shouldIntercept = this.predicate(\n      request,\n      parsedResult,\n      resolutionContext,\n    )\n\n    if (!shouldIntercept) {\n      return null\n    }\n\n    const publicRequest = this.getPublicRequest(request, parsedResult)\n\n    // Create a response extraction wrapper around the resolver\n    // since it can be both an async function and a generator.\n    const executeResolver = this.wrapResolver(this.resolver)\n    const mockedResponse = await executeResolver(\n      publicRequest,\n      response,\n      this.ctx,\n    )\n\n    return this.createExecutionResult(\n      parsedResult,\n      publicRequest,\n      mockedResponse,\n    )\n  }\n\n  private wrapResolver(\n    resolver: ResponseResolver<any, any>,\n  ): ResponseResolver<AsyncResponseResolverReturnType<any>, any> {\n    return async (req, res, ctx) => {\n      const result = this.resolverGenerator || (await resolver(req, res, ctx))\n\n      if (isIterable<AsyncResponseResolverReturnType<any>>(result)) {\n        const { value, done } = result[Symbol.iterator]().next()\n        const nextResponse = await value\n\n        // If the generator is done and there is no next value,\n        // return the previous generator's value.\n        if (!nextResponse && done) {\n          return this.resolverGeneratorResult\n        }\n\n        if (!this.resolverGenerator) {\n          this.resolverGenerator = result\n        }\n\n        this.resolverGeneratorResult = nextResponse\n        return nextResponse\n      }\n\n      return result\n    }\n  }\n\n  private createExecutionResult(\n    parsedResult: ParsedResult,\n    request: PublicRequest,\n    response: any,\n  ): RequestHandlerExecutionResult<PublicRequest> {\n    return {\n      handler: this,\n      parsedResult: parsedResult || null,\n      request,\n      response: response || null,\n    }\n  }\n}\n\n/**\n * Bypass this intercepted request.\n * This will make a call to the actual endpoint requested.\n */\nexport function passthrough(): MockedResponse<null> {\n  // Constructing a dummy \"101 Continue\" mocked response\n  // to keep the return type of the resolver consistent.\n  return {\n    status: 101,\n    statusText: 'Continue',\n    headers: new Headers(),\n    body: null,\n    // Setting \"passthrough\" to true will signal the response pipeline\n    // to perform this intercepted request as-is.\n    passthrough: true,\n    once: false,\n  }\n}\n", "import { Headers } from 'headers-polyfill'\nimport { DefaultBodyType } from './handlers/RequestHandler'\nimport { compose } from './utils/internal/compose'\nimport { NetworkError } from './utils/NetworkError'\n\nexport type MaybePromise<ValueType = any> = ValueType | Promise<ValueType>\n\n/**\n * Internal representation of a mocked response instance.\n */\nexport interface MockedResponse<BodyType extends DefaultBodyType = any> {\n  body: BodyType\n  status: number\n  statusText: string\n  headers: Headers\n  once: boolean\n  passthrough: boolean\n  delay?: number\n}\n\nexport type ResponseTransformer<\n  BodyType extends TransformerBodyType = any,\n  TransformerBodyType extends DefaultBodyType = any,\n> = (\n  res: MockedResponse<TransformerBodyType>,\n) => MaybePromise<MockedResponse<BodyType>>\n\nexport type ResponseFunction<BodyType extends DefaultBodyType = any> = (\n  ...transformers: ResponseTransformer<BodyType>[]\n) => MaybePromise<MockedResponse<BodyType>>\n\nexport type ResponseComposition<BodyType extends DefaultBodyType = any> =\n  ResponseFunction<BodyType> & {\n    /**\n     * Respond using a given mocked response to the first captured request.\n     * Does not affect any subsequent captured requests.\n     */\n    once: ResponseFunction<BodyType>\n    networkError: (message: string) => void\n  }\n\nexport const defaultResponse: Omit<MockedResponse, 'headers'> = {\n  status: 200,\n  statusText: 'OK',\n  body: null,\n  delay: 0,\n  once: false,\n  passthrough: false,\n}\n\nexport type ResponseCompositionOptions<BodyType> = {\n  defaultTransformers?: ResponseTransformer<BodyType>[]\n  mockedResponseOverrides?: Partial<MockedResponse>\n}\n\nexport const defaultResponseTransformers: ResponseTransformer<any>[] = []\n\nexport function createResponseComposition<BodyType extends DefaultBodyType>(\n  responseOverrides?: Partial<MockedResponse<BodyType>>,\n  defaultTransformers: ResponseTransformer<BodyType>[] = defaultResponseTransformers,\n): ResponseFunction {\n  return async (...transformers) => {\n    const initialResponse: MockedResponse = Object.assign(\n      {},\n      defaultResponse,\n      {\n        headers: new Headers({\n          'x-powered-by': 'msw',\n        }),\n      },\n      responseOverrides,\n    )\n\n    const resolvedTransformers = [\n      ...defaultTransformers,\n      ...transformers,\n    ].filter(Boolean)\n\n    const resolvedResponse =\n      resolvedTransformers.length > 0\n        ? compose(...resolvedTransformers)(initialResponse)\n        : initialResponse\n\n    return resolvedResponse\n  }\n}\n\nexport const response = Object.assign(createResponseComposition(), {\n  once: createResponseComposition({ once: true }),\n  networkError(message: string) {\n    throw new NetworkError(message)\n  },\n})\n", "type ArityOneFunction = (arg: any) => any\n\ntype LengthOfTuple<Tuple extends any[]> = Tuple extends { length: infer L }\n  ? L\n  : never\n\ntype DropFirstInTuple<Tuple extends any[]> = ((...args: Tuple) => any) extends (\n  arg: any,\n  ...rest: infer LastArg\n) => any\n  ? LastArg\n  : Tuple\n\ntype LastInTuple<Tuple extends any[]> = Tuple[LengthOfTuple<\n  DropFirstInTuple<Tuple>\n>]\n\ntype FirstFnParameterType<Functions extends ArityOneFunction[]> = Parameters<\n  LastInTuple<Functions>\n>[any]\n\ntype LastFnParameterType<Functions extends ArityOneFunction[]> = ReturnType<\n  Functions[0]\n>\n\n/**\n * Composes a given list of functions into a new function that\n * executes from right to left.\n */\nexport function compose<\n  Functions extends ArityOneFunction[],\n  LeftReturnType extends FirstFnParameterType<Functions>,\n  RightReturnType extends LastFnParameterType<Functions>,\n>(\n  ...fns: Functions\n): (\n  ...args: [LeftReturnType] extends [never] ? never[] : [LeftReturnType]\n) => RightReturnType {\n  return (...args) => {\n    return fns.reduceRight((leftFn: any, rightFn) => {\n      return leftFn instanceof Promise\n        ? Promise.resolve(leftFn).then(rightFn)\n        : rightFn(leftFn)\n    }, args[0])\n  }\n}\n", "// Ignore the source files traces for local testing.\nconst SOURCE_FRAME = /[\\/\\\\]msw[\\/\\\\]src[\\/\\\\](.+)/\n\nconst BUILD_FRAME =\n  /(node_modules)?[\\/\\\\]lib[\\/\\\\](umd|esm|iief|cjs)[\\/\\\\]|^[^\\/\\\\]*$/\n\n/**\n * Return the stack trace frame of a function's invocation.\n */\nexport function getCallFrame(error: Error) {\n  // In <IE11, new Error may return an undefined stack\n  const stack = error.stack\n\n  if (!stack) {\n    return\n  }\n\n  const frames: string[] = stack.split('\\n').slice(1)\n\n  // Get the first frame that doesn't reference the library's internal trace.\n  // Assume that frame is the invocation frame.\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame))\n  })\n\n  if (!declarationFrame) {\n    return\n  }\n\n  // Extract file reference from the stack frame.\n  const declarationPath = declarationFrame\n    .replace(/\\s*at [^()]*\\(([^)]+)\\)/, '$1')\n    .replace(/^@/, '')\n  return declarationPath\n}\n", "/**\n * Determines if the given function is an iterator.\n */\nexport function isIterable<IteratorType>(\n  fn: any,\n): fn is Generator<IteratorType, IteratorType, IteratorType> {\n  if (!fn) {\n    return false\n  }\n\n  return typeof (fn as Generator<unknown>)[Symbol.iterator] == 'function'\n}\n", "import { body, cookie, json, text, xml } from '../context'\nimport type { SerializedResponse } from '../setupWorker/glossary'\nimport { ResponseResolutionContext } from '../utils/getResponse'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { isStringEqual } from '../utils/internal/isStringEqual'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { prepareRequest } from '../utils/logging/prepareRequest'\nimport { prepareResponse } from '../utils/logging/prepareResponse'\nimport {\n  Match,\n  matchRequestUrl,\n  Path,\n  PathParams,\n} from '../utils/matching/matchRequestUrl'\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest'\nimport { MockedRequest } from '../utils/request/MockedRequest'\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl'\nimport {\n  DefaultBodyType,\n  defaultContext,\n  DefaultContext,\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  ResponseResolver,\n} from './RequestHandler'\n\ntype RestHandlerMethod = string | RegExp\n\nexport interface RestHandlerInfo extends RequestHandlerDefaultInfo {\n  method: RestHandlerMethod\n  path: Path\n}\n\nexport enum RESTMethods {\n  HEAD = 'HEAD',\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  OPTIONS = 'OPTIONS',\n  DELETE = 'DELETE',\n}\n\n// Declaring a context interface infers\n// JSDoc description of the referenced utils.\nexport type RestContext = DefaultContext & {\n  cookie: typeof cookie\n  text: typeof text\n  body: typeof body\n  json: typeof json\n  xml: typeof xml\n}\n\nexport const restContext: RestContext = {\n  ...defaultContext,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n}\n\nexport type RequestQuery = {\n  [queryName: string]: string\n}\n\nexport type ParsedRestRequest = Match\n\nexport class RestRequest<\n  RequestBody extends DefaultBodyType = DefaultBodyType,\n  RequestParams extends PathParams = PathParams,\n> extends MockedRequest<RequestBody> {\n  constructor(\n    request: MockedRequest<RequestBody>,\n    public readonly params: RequestParams,\n  ) {\n    super(request.url, {\n      ...request,\n      /**\n       * @deprecated https://github.com/mswjs/msw/issues/1318\n       * @note Use internal request body buffer as the body init\n       * because \"request.body\" is a getter that will trigger\n       * request body parsing at this step.\n       */\n      body: request['_body'],\n    })\n    this.id = request.id\n  }\n}\n\n/**\n * Request handler for REST API requests.\n * Provides request matching based on method and URL.\n */\nexport class RestHandler<\n  RequestType extends MockedRequest<DefaultBodyType> = MockedRequest<DefaultBodyType>,\n> extends RequestHandler<\n  RestHandlerInfo,\n  RequestType,\n  ParsedRestRequest,\n  RestRequest<\n    RequestType extends MockedRequest<infer RequestBodyType>\n      ? RequestBodyType\n      : any,\n    PathParams\n  >\n> {\n  constructor(\n    method: RestHandlerMethod,\n    path: Path,\n    resolver: ResponseResolver<any, any>,\n  ) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method,\n      },\n      ctx: restContext,\n      resolver,\n    })\n\n    this.checkRedundantQueryParameters()\n  }\n\n  private checkRedundantQueryParameters() {\n    const { method, path } = this.info\n\n    if (path instanceof RegExp) {\n      return\n    }\n\n    const url = cleanUrl(path)\n\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return\n    }\n\n    const searchParams = getSearchParams(path)\n    const queryParams: string[] = []\n\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName)\n    })\n\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`,\n    )\n  }\n\n  parse(request: RequestType, resolutionContext?: ResponseResolutionContext) {\n    return matchRequestUrl(\n      request.url,\n      this.info.path,\n      resolutionContext?.baseUrl,\n    )\n  }\n\n  protected getPublicRequest(\n    request: RequestType,\n    parsedResult: ParsedRestRequest,\n  ): RestRequest<any, PathParams> {\n    return new RestRequest(request, parsedResult.params || {})\n  }\n\n  predicate(request: RequestType, parsedResult: ParsedRestRequest) {\n    const matchesMethod =\n      this.info.method instanceof RegExp\n        ? this.info.method.test(request.method)\n        : isStringEqual(this.info.method, request.method)\n\n    return matchesMethod && parsedResult.matches\n  }\n\n  log(request: RequestType, response: SerializedResponse<any>) {\n    const publicUrl = getPublicUrlFromRequest(request)\n    const loggedRequest = prepareRequest(request)\n    const loggedResponse = prepareResponse(response)\n    const statusColor = getStatusCodeColor(response.status)\n\n    console.groupCollapsed(\n      devUtils.formatMessage('%s %s %s (%c%s%c)'),\n      getTimestamp(),\n      request.method,\n      publicUrl,\n      `color:${statusColor}`,\n      `${response.status} ${response.statusText}`,\n      'color:inherit',\n    )\n    console.log('Request', loggedRequest)\n    console.log('Handler:', this)\n    console.log('Response', loggedResponse)\n    console.groupEnd()\n  }\n}\n", "import { invariant } from 'outvariant'\nimport { ResponseTransformer } from '../response'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { jsonParse } from '../utils/internal/jsonParse'\nimport { mergeRight } from '../utils/internal/mergeRight'\nimport { json } from './json'\n\ntype ForbiddenFieldNames = '' | 'data' | 'errors' | 'extensions'\n\n/**\n * Set a custom field on the GraphQL mocked response.\n * @example res(ctx.fields('customField', value))\n * @see {@link https://mswjs.io/docs/api/context/field}\n */\nexport const field = <FieldNameType extends string, FieldValueType>(\n  fieldName: FieldNameType extends ForbiddenFieldNames ? never : FieldNameType,\n  fieldValue: FieldValueType,\n): ResponseTransformer<string> => {\n  return (res) => {\n    validateFieldName(fieldName)\n\n    const prevBody = jsonParse(res.body) || {}\n    const nextBody = mergeRight(prevBody, { [fieldName]: fieldValue })\n\n    return json(nextBody)(res as any) as any\n  }\n}\n\nfunction validateFieldName(fieldName: string) {\n  invariant(\n    fieldName.trim() !== '',\n    devUtils.formatMessage(\n      'Failed to set a custom field on a GraphQL response: field name cannot be empty.',\n    ),\n  )\n\n  invariant(\n    fieldName !== 'data',\n    devUtils.formatMessage(\n      'Failed to set a custom \"%s\" field on a mocked GraphQL response: forbidden field name. Did you mean to call \"ctx.data()\" instead?',\n      fieldName,\n    ),\n  )\n\n  invariant(\n    fieldName !== 'errors',\n    devUtils.formatMessage(\n      'Failed to set a custom \"%s\" field on a mocked GraphQL response: forbidden field name. Did you mean to call \"ctx.errors()\" instead?',\n      fieldName,\n    ),\n  )\n\n  invariant(\n    fieldName !== 'extensions',\n    devUtils.formatMessage(\n      'Failed to set a custom \"%s\" field on a mocked GraphQL response: forbidden field name. Did you mean to call \"ctx.extensions()\" instead?',\n      fieldName,\n    ),\n  )\n}\n", "export function tryCatch<Fn extends (...args: any[]) => any>(\n  fn: Fn,\n  onException?: (error: Error) => void,\n): ReturnType<Fn> | undefined {\n  try {\n    const result = fn()\n    return result\n  } catch (error) {\n    onException?.(error as Error)\n  }\n}\n", "import type { DocumentNode, OperationTypeNode } from 'graphql'\nimport { SerializedResponse } from '../setupWorker/glossary'\nimport { data } from '../context/data'\nimport { extensions } from '../context/extensions'\nimport { errors } from '../context/errors'\nimport { field } from '../context/field'\nimport { GraphQLPayloadContext } from '../typeUtils'\nimport { cookie } from '../context/cookie'\nimport {\n  defaultContext,\n  DefaultContext,\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n  ResponseResolver,\n} from './RequestHandler'\nimport { getTimestamp } from '../utils/logging/getTimestamp'\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor'\nimport { prepareRequest } from '../utils/logging/prepareRequest'\nimport { prepareResponse } from '../utils/logging/prepareResponse'\nimport { matchRequestUrl, Path } from '../utils/matching/matchRequestUrl'\nimport {\n  ParsedGraphQLRequest,\n  GraphQLMultipartRequestBody,\n  parseGraphQLRequest,\n  parseDocumentNode,\n} from '../utils/internal/parseGraphQLRequest'\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest'\nimport { tryCatch } from '../utils/internal/tryCatch'\nimport { devUtils } from '../utils/internal/devUtils'\nimport { MockedRequest } from '../utils/request/MockedRequest'\n\nexport type ExpectedOperationTypeNode = OperationTypeNode | 'all'\nexport type GraphQLHandlerNameSelector = DocumentNode | RegExp | string\n\n// GraphQL related context should contain utility functions\n// useful for GraphQL. Functions like `xml()` bear no value\n// in the GraphQL universe.\nexport type GraphQLContext<QueryType extends Record<string, unknown>> =\n  DefaultContext & {\n    data: GraphQLPayloadContext<QueryType>\n    extensions: GraphQLPayloadContext<QueryType>\n    errors: typeof errors\n    cookie: typeof cookie\n    field: typeof field\n  }\n\nexport const graphqlContext: GraphQLContext<any> = {\n  ...defaultContext,\n  data,\n  extensions,\n  errors,\n  cookie,\n  field,\n}\n\nexport type GraphQLVariables = Record<string, any>\n\nexport interface GraphQLHandlerInfo extends RequestHandlerDefaultInfo {\n  operationType: ExpectedOperationTypeNode\n  operationName: GraphQLHandlerNameSelector\n}\n\nexport type GraphQLRequestBody<VariablesType extends GraphQLVariables> =\n  | GraphQLJsonRequestBody<VariablesType>\n  | GraphQLMultipartRequestBody\n  | Record<string, any>\n  | undefined\n\nexport interface GraphQLJsonRequestBody<Variables extends GraphQLVariables> {\n  query: string\n  variables?: Variables\n}\n\nexport function isDocumentNode(\n  value: DocumentNode | any,\n): value is DocumentNode {\n  if (value == null) {\n    return false\n  }\n\n  return typeof value === 'object' && 'kind' in value && 'definitions' in value\n}\n\nexport class GraphQLRequest<\n  Variables extends GraphQLVariables,\n> extends MockedRequest<GraphQLRequestBody<Variables>> {\n  constructor(\n    request: MockedRequest,\n    public readonly variables: Variables,\n    public readonly operationName: string,\n  ) {\n    super(request.url, {\n      ...request,\n      /**\n       * TODO(https://github.com/mswjs/msw/issues/1318): Cleanup\n       */\n      body: request['_body'],\n    })\n  }\n}\n\nexport class GraphQLHandler<\n  Request extends GraphQLRequest<any> = GraphQLRequest<any>,\n> extends RequestHandler<\n  GraphQLHandlerInfo,\n  Request,\n  ParsedGraphQLRequest | null,\n  GraphQLRequest<any>\n> {\n  private endpoint: Path\n\n  constructor(\n    operationType: ExpectedOperationTypeNode,\n    operationName: GraphQLHandlerNameSelector,\n    endpoint: Path,\n    resolver: ResponseResolver<any, any>,\n  ) {\n    let resolvedOperationName = operationName\n\n    if (isDocumentNode(operationName)) {\n      const parsedNode = parseDocumentNode(operationName)\n\n      if (parsedNode.operationType !== operationType) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected \"${operationType}\", but got \"${parsedNode.operationType}\").`,\n        )\n      }\n\n      if (!parsedNode.operationName) {\n        throw new Error(\n          `Failed to create a GraphQL handler: provided a DocumentNode with no operation name.`,\n        )\n      }\n\n      resolvedOperationName = parsedNode.operationName\n    }\n\n    const header =\n      operationType === 'all'\n        ? `${operationType} (origin: ${endpoint.toString()})`\n        : `${operationType} ${resolvedOperationName} (origin: ${endpoint.toString()})`\n\n    super({\n      info: {\n        header,\n        operationType,\n        operationName: resolvedOperationName,\n      },\n      ctx: graphqlContext,\n      resolver,\n    })\n\n    this.endpoint = endpoint\n  }\n\n  parse(request: MockedRequest) {\n    return tryCatch(\n      () => parseGraphQLRequest(request),\n      (error) => console.error(error.message),\n    )\n  }\n\n  protected getPublicRequest(\n    request: Request,\n    parsedResult: ParsedGraphQLRequest,\n  ): GraphQLRequest<any> {\n    return new GraphQLRequest(\n      request,\n      parsedResult?.variables ?? {},\n      parsedResult?.operationName ?? '',\n    )\n  }\n\n  predicate(request: MockedRequest, parsedResult: ParsedGraphQLRequest) {\n    if (!parsedResult) {\n      return false\n    }\n\n    if (!parsedResult.operationName && this.info.operationType !== 'all') {\n      const publicUrl = getPublicUrlFromRequest(request)\n      devUtils.warn(`\\\nFailed to intercept a GraphQL request at \"${request.method} ${publicUrl}\": anonymous GraphQL operations are not supported.\n\nConsider naming this operation or using \"graphql.operation()\" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation\\\n      `)\n      return false\n    }\n\n    const hasMatchingUrl = matchRequestUrl(request.url, this.endpoint)\n    const hasMatchingOperationType =\n      this.info.operationType === 'all' ||\n      parsedResult.operationType === this.info.operationType\n\n    const hasMatchingOperationName =\n      this.info.operationName instanceof RegExp\n        ? this.info.operationName.test(parsedResult.operationName || '')\n        : parsedResult.operationName === this.info.operationName\n\n    return (\n      hasMatchingUrl.matches &&\n      hasMatchingOperationType &&\n      hasMatchingOperationName\n    )\n  }\n\n  log(\n    request: Request,\n    response: SerializedResponse<any>,\n    parsedRequest: ParsedGraphQLRequest,\n  ) {\n    const loggedRequest = prepareRequest(request)\n    const loggedResponse = prepareResponse(response)\n    const statusColor = getStatusCodeColor(response.status)\n    const requestInfo = parsedRequest?.operationName\n      ? `${parsedRequest?.operationType} ${parsedRequest?.operationName}`\n      : `anonymous ${parsedRequest?.operationType}`\n\n    console.groupCollapsed(\n      devUtils.formatMessage('%s %s (%c%s%c)'),\n      getTimestamp(),\n      `${requestInfo}`,\n      `color:${statusColor}`,\n      `${response.status} ${response.statusText}`,\n      'color:inherit',\n    )\n    console.log('Request:', loggedRequest)\n    console.log('Handler:', this)\n    console.log('Response:', loggedResponse)\n    console.groupEnd()\n  }\n}\n", "import { store } from '@mswjs/cookies'\nimport { MockedResponse } from '../../response'\nimport { MockedRequest } from './MockedRequest'\n\nexport function readResponseCookies(\n  request: MockedRequest,\n  response: MockedResponse,\n) {\n  store.add({ ...request, url: request.url.toString() }, response)\n  store.persist()\n}\n", "import { flattenHeadersObject, headersToObject } from 'headers-polyfill'\nimport type { SerializedResponse } from '../../setupWorker/glossary'\n\nexport async function serializeResponse(\n  response: Response,\n): Promise<SerializedResponse<string>> {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: flattenHeadersObject(headersToObject(response.headers)),\n    // Serialize the response body to a string\n    // so it's easier to process further down the chain in \"prepareResponse\" (browser-only)\n    // and \"parseBody\" (ambiguous).\n    body: await response.clone().text(),\n  }\n}\n", "import {\n  StartOptions,\n  SerializedResponse,\n  SetupWorkerInternalContext,\n  ServiceWorkerIncomingEventsMap,\n} from '../glossary'\nimport {\n  ServiceWorkerMessage,\n  WorkerChannel,\n} from './utils/createMessageChannel'\nimport { NetworkError } from '../../utils/NetworkError'\nimport { parseWorkerRequest } from '../../utils/request/parseWorkerRequest'\nimport { handleRequest } from '../../utils/handleRequest'\nimport { RequiredDeep } from '../../typeUtils'\nimport { MockedResponse } from '../../response'\nimport { devUtils } from '../../utils/internal/devUtils'\nimport { serializeResponse } from '../../utils/logging/serializeResponse'\n\nexport const createRequestListener = (\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n) => {\n  return async (\n    event: MessageEvent,\n    message: ServiceWorkerMessage<\n      'REQUEST',\n      ServiceWorkerIncomingEventsMap['REQUEST']\n    >,\n  ) => {\n    const messageChannel = new WorkerChannel(event.ports[0])\n    const request = parseWorkerRequest(message.payload)\n\n    try {\n      await handleRequest<SerializedResponse>(\n        request,\n        context.requestHandlers,\n        options,\n        context.emitter,\n        {\n          transformResponse,\n          onPassthroughResponse() {\n            messageChannel.postMessage('NOT_FOUND')\n          },\n          async onMockedResponse(\n            response,\n            { handler, publicRequest, parsedRequest },\n          ) {\n            if (response.body instanceof ReadableStream) {\n              throw new Error(\n                devUtils.formatMessage(\n                  'Failed to construct a mocked response with a \"ReadableStream\" body: mocked streams are not supported. Follow https://github.com/mswjs/msw/issues/1336 for more details.',\n                ),\n              )\n            }\n\n            const responseInstance = new Response(response.body, response)\n            const responseForLogs = responseInstance.clone()\n            const responseBodyBuffer = await responseInstance.arrayBuffer()\n\n            // If the mocked response has no body, keep it that way.\n            // Sending an empty \"ArrayBuffer\" to the worker will cause\n            // the worker constructing \"new Response(new ArrayBuffer(0))\"\n            // which will throw on responses that must have no body (i.e. 204).\n            const responseBody =\n              response.body == null ? null : responseBodyBuffer\n\n            messageChannel.postMessage(\n              'MOCK_RESPONSE',\n              {\n                ...response,\n                body: responseBody,\n              },\n              [responseBodyBuffer],\n            )\n\n            if (!options.quiet) {\n              context.emitter.once('response:mocked', async () => {\n                handler.log(\n                  publicRequest,\n                  await serializeResponse(responseForLogs),\n                  parsedRequest,\n                )\n              })\n            }\n          },\n        },\n      )\n    } catch (error) {\n      if (error instanceof NetworkError) {\n        // Treat emulated network error differently,\n        // as it is an intended exception in a request handler.\n        messageChannel.postMessage('NETWORK_ERROR', {\n          name: error.name,\n          message: error.message,\n        })\n\n        return\n      }\n\n      if (error instanceof Error) {\n        devUtils.error(\n          `Uncaught exception in the request handler for \"%s %s\":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,\n          request.method,\n          request.url,\n          error.stack ?? error,\n        )\n\n        // Treat all other exceptions in a request handler as unintended,\n        // alerting that there is a problem that needs fixing.\n        messageChannel.postMessage('MOCK_RESPONSE', {\n          status: 500,\n          statusText: 'Request Handler Error',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          }),\n        })\n      }\n    }\n  }\n}\n\nfunction transformResponse(\n  response: MockedResponse<string>,\n): SerializedResponse<string> {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers.all(),\n    body: response.body,\n    delay: response.delay,\n  }\n}\n", "import { SetupWorkerInternalContext } from '../../setupWorker/glossary'\n\nexport async function requestIntegrityCheck(\n  context: SetupWorkerInternalContext,\n  serviceWorker: ServiceWorker,\n): Promise<ServiceWorker> {\n  // Signal Service Worker to report back its integrity\n  context.workerChannel.send('INTEGRITY_CHECK_REQUEST')\n\n  const { payload: actualChecksum } = await context.events.once(\n    'INTEGRITY_CHECK_RESPONSE',\n  )\n\n  // Compare the response from the Service Worker and the\n  // global variable set during the build.\n  if (actualChecksum !== SERVICE_WORKER_CHECKSUM) {\n    throw new Error(\n      `Currently active Service Worker (${actualChecksum}) is behind the latest published one (${SERVICE_WORKER_CHECKSUM}).`,\n    )\n  }\n\n  return serviceWorker\n}\n", "import { until } from '@open-draft/until'\n\n/**\n * Intercepts and defers any requests on the page\n * until the Service Worker instance is ready.\n * Must only be used in a browser.\n */\nexport function deferNetworkRequestsUntil(predicatePromise: Promise<any>) {\n  // Defer any `XMLHttpRequest` requests until the Service Worker is ready.\n  const originalXhrSend = window.XMLHttpRequest.prototype.send\n  window.XMLHttpRequest.prototype.send = function (\n    ...args: Parameters<XMLHttpRequest['send']>\n  ) {\n    // Keep this function synchronous to comply with `XMLHttpRequest.prototype.send`,\n    // because that method is always synchronous.\n    until(() => predicatePromise).then(() => {\n      window.XMLHttpRequest.prototype.send = originalXhrSend\n      this.send(...args)\n    })\n  }\n\n  // Defer any `fetch` requests until the Service Worker is ready.\n  const originalFetch = window.fetch\n  window.fetch = async (...args) => {\n    await until(() => predicatePromise)\n    window.fetch = originalFetch\n    return window.fetch(...args)\n  }\n}\n", "import {\n  ServiceWorkerIncomingEventsMap,\n  SetupWorkerInternalContext,\n} from '../../setupWorker/glossary'\nimport { ServiceWorkerMessage } from './utils/createMessageChannel'\n\nexport function createResponseListener(context: SetupWorkerInternalContext) {\n  return (\n    _: MessageEvent,\n    message: ServiceWorkerMessage<\n      'RESPONSE',\n      ServiceWorkerIncomingEventsMap['RESPONSE']\n    >,\n  ) => {\n    const { payload: responseJson } = message\n\n    /**\n     * CORS requests with `mode: \"no-cors\"` result in \"opaque\" responses.\n     * That kind of responses cannot be manipulated in JavaScript due\n     * to the security considerations.\n     * @see https://fetch.spec.whatwg.org/#concept-filtered-response-opaque\n     * @see https://github.com/mswjs/msw/issues/529\n     */\n    if (responseJson.type?.includes('opaque')) {\n      return\n    }\n\n    const response = new Response(responseJson.body || null, responseJson)\n    const isMockedResponse = response.headers.get('x-powered-by') === 'msw'\n\n    if (isMockedResponse) {\n      context.emitter.emit('response:mocked', response, responseJson.requestId)\n    } else {\n      context.emitter.emit('response:bypass', response, responseJson.requestId)\n    }\n  }\n}\n", "import { devUtils } from '../../../utils/internal/devUtils'\nimport { StartOptions } from '../../glossary'\n\nexport function validateWorkerScope(\n  registration: ServiceWorkerRegistration,\n  options?: StartOptions,\n): void {\n  if (!options?.quiet && !location.href.startsWith(registration.scope)) {\n    devUtils.warn(\n      `\\\nCannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level (\"/\") of your application.\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.\\\n`,\n    )\n  }\n}\n", "import { devUtils } from '../../../utils/internal/devUtils'\n\nexport function printStopMessage(args: { quiet?: boolean } = {}): void {\n  if (args.quiet) {\n    return\n  }\n\n  console.log(\n    `%c${devUtils.formatMessage('Mocking disabled.')}`,\n    'color:orangered;font-weight:bold;',\n  )\n}\n", "import { devUtils } from '../../utils/internal/devUtils'\nimport { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport const createStop = (\n  context: SetupWorkerInternalContext,\n): StopHandler => {\n  return function stop() {\n    // Warn developers calling \"worker.stop()\" more times than necessary.\n    // This likely indicates a mistake in their code.\n    if (!context.isMockingEnabled) {\n      devUtils.warn(\n        'Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.',\n      )\n      return\n    }\n\n    /**\n     * Signal the Service Worker to disable mocking for this client.\n     * Use this an an explicit way to stop the mocking, while preserving\n     * the worker-client relation. Does not affect the worker's lifecycle.\n     */\n    context.workerChannel.send('MOCK_DEACTIVATE')\n    context.isMockingEnabled = false\n    window.clearInterval(context.keepAliveInterval)\n\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n", "import { RequiredDeep } from '../../../typeUtils'\nimport { mergeRight } from '../../../utils/internal/mergeRight'\nimport {\n  SetupWorker,\n  SetupWorkerInternalContext,\n  StartHandler,\n  StartOptions,\n} from '../../glossary'\n\nexport const DEFAULT_START_OPTIONS: RequiredDeep<StartOptions> = {\n  serviceWorker: {\n    url: '/mockServiceWorker.js',\n    options: null as any,\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: 'warn',\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl\n  },\n}\n\n/**\n * Returns resolved worker start options, merging the default options\n * with the given custom options.\n */\nexport function resolveStartOptions(\n  initialOptions?: StartOptions,\n): RequiredDeep<StartOptions> {\n  return mergeRight(\n    DEFAULT_START_OPTIONS,\n    initialOptions || {},\n  ) as RequiredDeep<StartOptions>\n}\n\nexport function prepareStartHandler(\n  handler: StartHandler,\n  context: SetupWorkerInternalContext,\n): SetupWorker['start'] {\n  return (initialOptions) => {\n    context.startOptions = resolveStartOptions(initialOptions)\n    return handler(context.startOptions, initialOptions || {})\n  }\n}\n", "import {\n  Interceptor,\n  BatchInterceptor,\n  HttpRequestEventMap,\n} from '@mswjs/interceptors'\nimport { FetchInterceptor } from '@mswjs/interceptors/lib/interceptors/fetch'\nimport { XMLHttpRequestInterceptor } from '@mswjs/interceptors/lib/interceptors/XMLHttpRequest'\nimport {\n  SerializedResponse,\n  SetupWorkerInternalContext,\n  StartOptions,\n} from '../glossary'\nimport type { RequiredDeep } from '../../typeUtils'\nimport { handleRequest } from '../../utils/handleRequest'\nimport { MockedRequest } from '../../utils/request/MockedRequest'\nimport { serializeResponse } from '../../utils/logging/serializeResponse'\nimport { createResponseFromIsomorphicResponse } from '../../utils/request/createResponseFromIsomorphicResponse'\n\nexport function createFallbackRequestListener(\n  context: SetupWorkerInternalContext,\n  options: RequiredDeep<StartOptions>,\n): Interceptor<HttpRequestEventMap> {\n  const interceptor = new BatchInterceptor({\n    name: 'fallback',\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()],\n  })\n\n  interceptor.on('request', async (request) => {\n    const mockedRequest = new MockedRequest(request.url, {\n      ...request,\n      body: await request.arrayBuffer(),\n    })\n\n    const response = await handleRequest<SerializedResponse>(\n      mockedRequest,\n      context.requestHandlers,\n      options,\n      context.emitter,\n      {\n        transformResponse(response) {\n          return {\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers.all(),\n            body: response.body,\n            delay: response.delay,\n          }\n        },\n        onMockedResponse(_, { handler, publicRequest, parsedRequest }) {\n          if (!options.quiet) {\n            context.emitter.once('response:mocked', async (response) => {\n              handler.log(\n                publicRequest,\n                await serializeResponse(response),\n                parsedRequest,\n              )\n            })\n          }\n        },\n      },\n    )\n\n    if (response) {\n      request.respondWith(response)\n    }\n  })\n\n  interceptor.on('response', (request, response) => {\n    if (!request.id) {\n      return\n    }\n\n    const browserResponse = createResponseFromIsomorphicResponse(response)\n\n    if (response.headers.get('x-powered-by') === 'msw') {\n      context.emitter.emit('response:mocked', browserResponse, request.id)\n    } else {\n      context.emitter.emit('response:bypass', browserResponse, request.id)\n    }\n  })\n\n  interceptor.apply()\n\n  return interceptor\n}\n", "import { IsomorphicResponse } from '@mswjs/interceptors'\n\nexport function createResponseFromIsomorphicResponse(\n  response: IsomorphicResponse,\n): Response {\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n  })\n}\n", "import { createFallbackRequestListener } from './createFallbackRequestListener'\nimport { SetupWorkerInternalContext, StartHandler } from '../glossary'\nimport { printStartMessage } from './utils/printStartMessage'\n\nexport function createFallbackStart(\n  context: SetupWorkerInternalContext,\n): StartHandler {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(\n      context,\n      options,\n    )\n\n    printStartMessage({\n      message: 'Mocking enabled (fallback mode).',\n      quiet: options.quiet,\n    })\n\n    return undefined\n  }\n}\n", "import { SetupWorkerInternalContext, StopHandler } from '../glossary'\nimport { printStopMessage } from './utils/printStopMessage'\n\nexport function createFallbackStop(\n  context: SetupWorkerInternalContext,\n): StopHandler {\n  return function stop() {\n    context.fallbackInterceptor?.dispose()\n    printStopMessage({ quiet: context.startOptions?.quiet })\n  }\n}\n", "import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport {\n  DefaultBodyType,\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n} from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { MockedRequest } from './utils/request/MockedRequest'\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> {\n  protected initialHandlers: ReadonlyArray<RequestHandler>\n  protected currentHandlers: Array<RequestHandler>\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler>) {\n    this.validateHandlers(...initialHandlers)\n\n    this.initialHandlers = toReadonlyArray(initialHandlers)\n    this.currentHandlers = [...initialHandlers]\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n  }\n\n  private validateHandlers(...handlers: ReadonlyArray<RequestHandler>): void {\n    // Guard against incorrect call signature of the setup API.\n    for (const handler of handlers) {\n      invariant(\n        !Array.isArray(handler),\n        devUtils.formatMessage(\n          'Failed to construct \"%s\" given an Array of request handlers. Make sure you spread the request handlers when calling the respective setup function.',\n        ),\n        this.constructor.name,\n      )\n    }\n  }\n\n  protected dispose(): void {\n    this.emitter.removeAllListeners()\n    this.publicEmitter.removeAllListeners()\n  }\n\n  public use(...runtimeHandlers: Array<RequestHandler>): void {\n    this.currentHandlers.unshift(...runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.currentHandlers.forEach((handler) => {\n      handler.markAsSkipped(false)\n    })\n  }\n\n  public resetHandlers(...nextHandlers: Array<RequestHandler>): void {\n    this.currentHandlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public listHandlers(): ReadonlyArray<\n    RequestHandler<\n      RequestHandlerDefaultInfo,\n      MockedRequest<DefaultBodyType>,\n      any,\n      MockedRequest<DefaultBodyType>\n    >\n  > {\n    return toReadonlyArray(this.currentHandlers)\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n\n  abstract printHandlers(): void\n}\n", "import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Pipes all emitted events from one emitter to another.\n */\nexport function pipeEvents<Events extends EventMap>(\n  source: Emitter<Events>,\n  destination: Emitter<Events>,\n): void {\n  const rawEmit = source.emit\n\n  // @ts-ignore\n  if (rawEmit._isPiped) {\n    return\n  }\n\n  source.emit = function (event, ...data) {\n    destination.emit(event, ...data)\n    return rawEmit.call(this, event, ...data)\n  }\n\n  // @ts-ignore\n  source.emit._isPiped = true\n}\n", "/**\n * Creates an immutable copy of the given array.\n */\nexport function toReadonlyArray<T>(source: Array<T>): ReadonlyArray<T> {\n  const clone = [...source] as Array<T>\n  Object.freeze(clone)\n  return clone\n}\n", "import { DefaultBodyType, ResponseResolver } from './handlers/RequestHandler'\nimport {\n  RESTMethods,\n  RestContext,\n  RestHandler,\n  RestRequest,\n} from './handlers/RestHandler'\nimport { Path, PathParams } from './utils/matching/matchRequestUrl'\n\nfunction createRestHandler<Method extends RESTMethods | RegExp>(\n  method: Method,\n) {\n  return <\n    RequestBodyType extends DefaultBodyType = DefaultBodyType,\n    Params extends PathParams<keyof Params> = PathParams,\n    ResponseBody extends DefaultBodyType = DefaultBodyType,\n  >(\n    path: Path,\n    resolver: ResponseResolver<\n      RestRequest<\n        Method extends RESTMethods.HEAD | RESTMethods.GET\n          ? never\n          : RequestBodyType,\n        Params\n      >,\n      RestContext,\n      ResponseBody\n    >,\n  ) => {\n    return new RestHandler(method, path, resolver)\n  }\n}\n\nexport const rest = {\n  all: createRestHandler(/.+/),\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS),\n}\n", "import type { DocumentNode, OperationTypeNode } from 'graphql'\nimport { ResponseResolver } from './handlers/RequestHandler'\nimport {\n  GraphQLHandler,\n  GraphQLContext,\n  GraphQLRequest,\n  GraphQLVariables,\n  ExpectedOperationTypeNode,\n  GraphQLHandlerNameSelector,\n} from './handlers/GraphQLHandler'\nimport { Path } from './utils/matching/matchRequestUrl'\n\nexport interface TypedDocumentNode<\n  Result = { [key: string]: any },\n  Variables = { [key: string]: any },\n> extends DocumentNode {\n  __apiType?: (variables: Variables) => Result\n  __resultType?: Result\n  __variablesType?: Variables\n}\n\nfunction createScopedGraphQLHandler(\n  operationType: ExpectedOperationTypeNode,\n  url: Path,\n) {\n  return <\n    Query extends Record<string, any>,\n    Variables extends GraphQLVariables = GraphQLVariables,\n  >(\n    operationName:\n      | GraphQLHandlerNameSelector\n      | DocumentNode\n      | TypedDocumentNode<Query, Variables>,\n    resolver: ResponseResolver<\n      GraphQLRequest<Variables>,\n      GraphQLContext<Query>\n    >,\n  ) => {\n    return new GraphQLHandler<GraphQLRequest<Variables>>(\n      operationType,\n      operationName,\n      url,\n      resolver,\n    )\n  }\n}\n\nfunction createGraphQLOperationHandler(url: Path) {\n  return <\n    Query extends Record<string, any>,\n    Variables extends GraphQLVariables = GraphQLVariables,\n  >(\n    resolver: ResponseResolver<\n      GraphQLRequest<Variables>,\n      GraphQLContext<Query>\n    >,\n  ) => {\n    return new GraphQLHandler<GraphQLRequest<Variables>>(\n      'all',\n      new RegExp('.*'),\n      url,\n      resolver,\n    )\n  }\n}\n\nconst standardGraphQLHandlers = {\n  /**\n   * Captures any GraphQL operation, regardless of its name, under the current scope.\n   * @example\n   * graphql.operation((req, res, ctx) => {\n   *   return res(ctx.data({ name: 'John' }))\n   * })\n   * @see {@link https://mswjs.io/docs/api/graphql/operation `graphql.operation()`}\n   */\n  operation: createGraphQLOperationHandler('*'),\n\n  /**\n   * Captures a GraphQL query by a given name.\n   * @example\n   * graphql.query('GetUser', (req, res, ctx) => {\n   *   return res(ctx.data({ user: { name: 'John' } }))\n   * })\n   * @see {@link https://mswjs.io/docs/api/graphql/query `graphql.query()`}\n   */\n  query: createScopedGraphQLHandler('query' as OperationTypeNode, '*'),\n\n  /**\n   * Captures a GraphQL mutation by a given name.\n   * @example\n   * graphql.mutation('SavePost', (req, res, ctx) => {\n   *   return res(ctx.data({ post: { id: 'abc-123' } }))\n   * })\n   * @see {@link https://mswjs.io/docs/api/graphql/mutation `graphql.mutation()`}\n   */\n  mutation: createScopedGraphQLHandler('mutation' as OperationTypeNode, '*'),\n}\n\nfunction createGraphQLLink(url: Path): typeof standardGraphQLHandlers {\n  return {\n    operation: createGraphQLOperationHandler(url),\n    query: createScopedGraphQLHandler('query' as OperationTypeNode, url),\n    mutation: createScopedGraphQLHandler('mutation' as OperationTypeNode, url),\n  }\n}\n\nexport const graphql = {\n  ...standardGraphQLHandlers,\n  link: createGraphQLLink,\n}\n"],
  "mappings": "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",
  "names": ["FetchInterceptor", "_this", "_a", "_b", "request", "mockedResponse", "response", "__toCommonJS", "value", "name", "error", "body", "import_is_node_process", "import_headers_polyfill", "import_outvariant", "import_until", "worker", "context", "rest", "data", "import_interceptors", "cookieUtils", "field", "contentType", "text", "result", "status", "cleanUrl", "response", "RESTMethods", "getStringMatchScore", "strategy", "import_cookies", "import_fetch"]
}
